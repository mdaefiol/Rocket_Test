
SIL_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e24  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003f38  08003f38  00013f38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f90  08003f90  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003f90  08003f90  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f90  08003f90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000078  0800400c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  0800400c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad70  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1b  00000000  00000000  0002ae0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001765b  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c385  00000000  00000000  000456bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899aa  00000000  00000000  00051a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db3ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  000db43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f1c 	.word	0x08003f1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003f1c 	.word	0x08003f1c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <HAL_TIM_PeriodElapsedCallback>:
float data_float;
uint8_t rx_byte[1] = {0x01};


// INTERRUPÇAO CONFIGURADA PARA 200Hz, 1 dado a cada 0,005s -> 16bytes = 0.08
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim4.Instance){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d11d      	bne.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x50>
		if (data_received_count == 0) {
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d108      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x2e>
			HAL_UART_Transmit_IT(&huart2, rx_byte, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	4910      	ldr	r1, [pc, #64]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000a4a:	f001 ff00 	bl	800284e <HAL_UART_Transmit_IT>
			data_received_count = 1;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_buffer, 16);
			data_UART = 0x01;
			data_received_count++;
		}
	}
}
 8000a54:	e010      	b.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x50>
		else if (data_received_count != 0){
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d00c      	beq.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x50>
			HAL_UART_Receive_IT(&huart2, rx_buffer, 16);
 8000a5e:	2210      	movs	r2, #16
 8000a60:	490b      	ldr	r1, [pc, #44]	; (8000a90 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a62:	480a      	ldr	r0, [pc, #40]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000a64:	f001 ff37 	bl	80028d6 <HAL_UART_Receive_IT>
			data_UART = 0x01;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
			data_received_count++;
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000e8 	.word	0x200000e8
 8000a84:	200000c8 	.word	0x200000c8
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000130 	.word	0x20000130
 8000a90:	200000d4 	.word	0x200000d4
 8000a94:	200000cc 	.word	0x200000cc

08000a98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == huart2.Instance){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b62      	ldr	r3, [pc, #392]	; (8000c30 <HAL_UART_RxCpltCallback+0x198>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	f040 80ae 	bne.w	8000c0a <HAL_UART_RxCpltCallback+0x172>
		if(data_UART == 0x01) {
 8000aae:	4b61      	ldr	r3, [pc, #388]	; (8000c34 <HAL_UART_RxCpltCallback+0x19c>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	f040 80a6 	bne.w	8000c04 <HAL_UART_RxCpltCallback+0x16c>
			data_hex = (rx_buffer[0] << 24) | (rx_buffer[1] << 16) | (rx_buffer[2] << 8) | rx_buffer[3];
 8000ab8:	4b5f      	ldr	r3, [pc, #380]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	061a      	lsls	r2, r3, #24
 8000abe:	4b5e      	ldr	r3, [pc, #376]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000ac0:	785b      	ldrb	r3, [r3, #1]
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	4b5c      	ldr	r3, [pc, #368]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000ac8:	789b      	ldrb	r3, [r3, #2]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	4313      	orrs	r3, r2
 8000ace:	4a5a      	ldr	r2, [pc, #360]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000ad0:	78d2      	ldrb	r2, [r2, #3]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b59      	ldr	r3, [pc, #356]	; (8000c3c <HAL_UART_RxCpltCallback+0x1a4>)
 8000ad8:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 8000ada:	4b58      	ldr	r3, [pc, #352]	; (8000c3c <HAL_UART_RxCpltCallback+0x1a4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a58      	ldr	r2, [pc, #352]	; (8000c40 <HAL_UART_RxCpltCallback+0x1a8>)
 8000ae0:	6013      	str	r3, [r2, #0]
			sensor_data.accel_x = data_float;
 8000ae2:	4b57      	ldr	r3, [pc, #348]	; (8000c40 <HAL_UART_RxCpltCallback+0x1a8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fc96 	bl	8000418 <__aeabi_f2d>
 8000aec:	4602      	mov	r2, r0
 8000aee:	460b      	mov	r3, r1
 8000af0:	4954      	ldr	r1, [pc, #336]	; (8000c44 <HAL_UART_RxCpltCallback+0x1ac>)
 8000af2:	e9c1 2300 	strd	r2, r3, [r1]

			data_hex = (rx_buffer[4] << 24) | (rx_buffer[5] << 16) | (rx_buffer[6] << 8) | rx_buffer[7];
 8000af6:	4b50      	ldr	r3, [pc, #320]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	061a      	lsls	r2, r3, #24
 8000afc:	4b4e      	ldr	r3, [pc, #312]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000afe:	795b      	ldrb	r3, [r3, #5]
 8000b00:	041b      	lsls	r3, r3, #16
 8000b02:	431a      	orrs	r2, r3
 8000b04:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b06:	799b      	ldrb	r3, [r3, #6]
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	4a4a      	ldr	r2, [pc, #296]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b0e:	79d2      	ldrb	r2, [r2, #7]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b49      	ldr	r3, [pc, #292]	; (8000c3c <HAL_UART_RxCpltCallback+0x1a4>)
 8000b16:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 8000b18:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <HAL_UART_RxCpltCallback+0x1a4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a48      	ldr	r2, [pc, #288]	; (8000c40 <HAL_UART_RxCpltCallback+0x1a8>)
 8000b1e:	6013      	str	r3, [r2, #0]
			sensor_data.accel_y = data_float;
 8000b20:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <HAL_UART_RxCpltCallback+0x1a8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fc77 	bl	8000418 <__aeabi_f2d>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	4945      	ldr	r1, [pc, #276]	; (8000c44 <HAL_UART_RxCpltCallback+0x1ac>)
 8000b30:	e9c1 2302 	strd	r2, r3, [r1, #8]

			data_hex = (rx_buffer[8] << 24) | (rx_buffer[9] << 16) | (rx_buffer[10] << 8) | rx_buffer[11];
 8000b34:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b36:	7a1b      	ldrb	r3, [r3, #8]
 8000b38:	061a      	lsls	r2, r3, #24
 8000b3a:	4b3f      	ldr	r3, [pc, #252]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b3c:	7a5b      	ldrb	r3, [r3, #9]
 8000b3e:	041b      	lsls	r3, r3, #16
 8000b40:	431a      	orrs	r2, r3
 8000b42:	4b3d      	ldr	r3, [pc, #244]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b44:	7a9b      	ldrb	r3, [r3, #10]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	4a3b      	ldr	r2, [pc, #236]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b4c:	7ad2      	ldrb	r2, [r2, #11]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_UART_RxCpltCallback+0x1a4>)
 8000b54:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 8000b56:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <HAL_UART_RxCpltCallback+0x1a4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a39      	ldr	r2, [pc, #228]	; (8000c40 <HAL_UART_RxCpltCallback+0x1a8>)
 8000b5c:	6013      	str	r3, [r2, #0]
			sensor_data.accel_z = data_float;
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <HAL_UART_RxCpltCallback+0x1a8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fc58 	bl	8000418 <__aeabi_f2d>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4935      	ldr	r1, [pc, #212]	; (8000c44 <HAL_UART_RxCpltCallback+0x1ac>)
 8000b6e:	e9c1 2304 	strd	r2, r3, [r1, #16]

			data_hex = (rx_buffer[12] << 24) | (rx_buffer[13] << 16) | (rx_buffer[14] << 8) | rx_buffer[15];
 8000b72:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b74:	7b1b      	ldrb	r3, [r3, #12]
 8000b76:	061a      	lsls	r2, r3, #24
 8000b78:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b7a:	7b5b      	ldrb	r3, [r3, #13]
 8000b7c:	041b      	lsls	r3, r3, #16
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	4b2d      	ldr	r3, [pc, #180]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b82:	7b9b      	ldrb	r3, [r3, #14]
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	4313      	orrs	r3, r2
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <HAL_UART_RxCpltCallback+0x1a0>)
 8000b8a:	7bd2      	ldrb	r2, [r2, #15]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <HAL_UART_RxCpltCallback+0x1a4>)
 8000b92:	601a      	str	r2, [r3, #0]
			data_float = *(float*)&data_hex;
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_UART_RxCpltCallback+0x1a4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <HAL_UART_RxCpltCallback+0x1a8>)
 8000b9a:	6013      	str	r3, [r2, #0]
			sensor_data.pressao = data_float;
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <HAL_UART_RxCpltCallback+0x1a8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fc39 	bl	8000418 <__aeabi_f2d>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	4926      	ldr	r1, [pc, #152]	; (8000c44 <HAL_UART_RxCpltCallback+0x1ac>)
 8000bac:	e9c1 2306 	strd	r2, r3, [r1, #24]

			double pressureSeaLevel = 101325; //Pa
 8000bb0:	a319      	add	r3, pc, #100	; (adr r3, 8000c18 <HAL_UART_RxCpltCallback+0x180>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9c7 2302 	strd	r2, r3, [r7, #8]

			pressure.altitude = 44330.0*(1.0 - pow((sensor_data.pressao/pressureSeaLevel), 0.1903));
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_UART_RxCpltCallback+0x1ac>)
 8000bbc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bc4:	f7ff fdaa 	bl	800071c <__aeabi_ddiv>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	460b      	mov	r3, r1
 8000bcc:	4610      	mov	r0, r2
 8000bce:	4619      	mov	r1, r3
 8000bd0:	a313      	add	r3, pc, #76	; (adr r3, 8000c20 <HAL_UART_RxCpltCallback+0x188>)
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f002 fabf 	bl	8003158 <pow>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	4919      	ldr	r1, [pc, #100]	; (8000c48 <HAL_UART_RxCpltCallback+0x1b0>)
 8000be4:	f7ff fab8 	bl	8000158 <__aeabi_dsub>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	a30d      	add	r3, pc, #52	; (adr r3, 8000c28 <HAL_UART_RxCpltCallback+0x190>)
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	f7ff fc67 	bl	80004c8 <__aeabi_dmul>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	4913      	ldr	r1, [pc, #76]	; (8000c4c <HAL_UART_RxCpltCallback+0x1b4>)
 8000c00:	e9c1 2302 	strd	r2, r3, [r1, #8]
		}
		data_UART = 0x00;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_UART_RxCpltCallback+0x19c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	f3af 8000 	nop.w
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	40f8bcd0 	.word	0x40f8bcd0
 8000c20:	1a36e2eb 	.word	0x1a36e2eb
 8000c24:	3fc85bc0 	.word	0x3fc85bc0
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	40e5a540 	.word	0x40e5a540
 8000c30:	20000130 	.word	0x20000130
 8000c34:	200000cc 	.word	0x200000cc
 8000c38:	200000d4 	.word	0x200000d4
 8000c3c:	200000d0 	.word	0x200000d0
 8000c40:	200000e4 	.word	0x200000e4
 8000c44:	20000098 	.word	0x20000098
 8000c48:	3ff00000 	.word	0x3ff00000
 8000c4c:	200000b8 	.word	0x200000b8

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 f9f6 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f80c 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f000 f8c8 	bl	8000df0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c60:	f000 f89c 	bl	8000d9c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000c64:	f000 f84c 	bl	8000d00 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8000c68:	4801      	ldr	r0, [pc, #4]	; (8000c70 <main+0x20>)
 8000c6a:	f001 f9f9 	bl	8002060 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <main+0x1e>
 8000c70:	200000e8 	.word	0x200000e8

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	; 0x40
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	2228      	movs	r2, #40	; 0x28
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fa60 	bl	8003148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0318 	add.w	r3, r7, #24
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fd65 	bl	800178c <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cc8:	f000 f8b4 	bl	8000e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 ffd2 	bl	8001c90 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cf2:	f000 f89f 	bl	8000e34 <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3740      	adds	r7, #64	; 0x40
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <MX_TIM4_Init+0x98>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d24:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000d28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d32:	2232      	movs	r2, #50	; 0x32
 8000d34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d42:	4814      	ldr	r0, [pc, #80]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d44:	f001 f93c 	bl	8001fc0 <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f000 f871 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d60:	f001 fad8 	bl	8002314 <HAL_TIM_ConfigClockSource>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 f863 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_TIM4_Init+0x94>)
 8000d7c:	f001 fcaa 	bl	80026d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000d86:	f000 f855 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000e8 	.word	0x200000e8
 8000d98:	40000800 	.word	0x40000800

08000d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_USART2_UART_Init+0x50>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f001 fcee 	bl	80027b4 <HAL_UART_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dde:	f000 f829 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000130 	.word	0x20000130
 8000dec:	40004400 	.word	0x40004400

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_GPIO_Init+0x40>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <MX_GPIO_Init+0x40>)
 8000dfc:	f043 0320 	orr.w	r3, r3, #32
 8000e00:	6193      	str	r3, [r2, #24]
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_GPIO_Init+0x40>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f003 0320 	and.w	r3, r3, #32
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_GPIO_Init+0x40>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <MX_GPIO_Init+0x40>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <MX_GPIO_Init+0x40>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_MspInit+0x40>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_MspInit+0x40>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6193      	str	r3, [r2, #24]
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_MspInit+0x40>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_MspInit+0x40>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_MspInit+0x40>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_MspInit+0x40>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_TIM_Base_MspInit+0x44>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d113      	bne.n	8000ebe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_TIM_Base_MspInit+0x48>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_TIM_Base_MspInit+0x48>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_TIM_Base_MspInit+0x48>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	201e      	movs	r0, #30
 8000eb4:	f000 f9ff 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000eb8:	201e      	movs	r0, #30
 8000eba:	f000 fa18 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40000800 	.word	0x40000800
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_UART_MspInit+0x98>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d137      	bne.n	8000f60 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_UART_MspInit+0x9c>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_UART_MspInit+0x9c>)
 8000ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efa:	61d3      	str	r3, [r2, #28]
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_UART_MspInit+0x9c>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x9c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x9c>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x9c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f20:	2304      	movs	r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f34:	f000 faa6 	bl	8001484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000f4c:	f000 fa9a 	bl	8001484 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2026      	movs	r0, #38	; 0x26
 8000f56:	f000 f9ae 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f5a:	2026      	movs	r0, #38	; 0x26
 8000f5c:	f000 f9c7 	bl	80012ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f889 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM4_IRQHandler+0x10>)
 8000fca:	f001 f89b 	bl	8002104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000e8 	.word	0x200000e8

08000fd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <USART2_IRQHandler+0x10>)
 8000fde:	f001 fcab 	bl	8002938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000130 	.word	0x20000130

08000fec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffa:	490d      	ldr	r1, [pc, #52]	; (8001030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001010:	4c0a      	ldr	r4, [pc, #40]	; (800103c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800101e:	f7ff ffe5 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001022:	f002 f86d 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001026:	f7ff fe13 	bl	8000c50 <main>
  bx lr
 800102a:	4770      	bx	lr
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001034:	08003f98 	.word	0x08003f98
  ldr r2, =_sbss
 8001038:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800103c:	20000178 	.word	0x20000178

08001040 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC1_2_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x28>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f923 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	200f      	movs	r0, #15
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff feee 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f93b 	bl	800130a <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f903 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000004 	.word	0x20000004
 80010c8:	2000000c 	.word	0x2000000c
 80010cc:	20000008 	.word	0x20000008

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x20>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <HAL_IncTick+0x20>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	20000174 	.word	0x20000174

080010f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <HAL_GetTick+0x10>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000174 	.word	0x20000174

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	db0b      	blt.n	8001196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 021f 	and.w	r2, r3, #31
 8001184:	4906      	ldr	r1, [pc, #24]	; (80011a0 <__NVIC_EnableIRQ+0x34>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	2001      	movs	r0, #1
 800118e:	fa00 f202 	lsl.w	r2, r0, r2
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	; (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	; (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff90 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff2d 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff42 	bl	8001150 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff90 	bl	80011f8 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5f 	bl	80011a4 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff35 	bl	800116c <__NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffa2 	bl	800125c <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001322:	b480      	push	{r7}
 8001324:	b085      	sub	sp, #20
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001334:	2b02      	cmp	r3, #2
 8001336:	d008      	beq.n	800134a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e020      	b.n	800138c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 020e 	bic.w	r2, r2, #14
 8001358:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
	...

08001398 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d005      	beq.n	80013ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2204      	movs	r2, #4
 80013b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e051      	b.n	800145e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 020e 	bic.w	r2, r2, #14
 80013c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_DMA_Abort_IT+0xd0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d029      	beq.n	8001438 <HAL_DMA_Abort_IT+0xa0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a20      	ldr	r2, [pc, #128]	; (800146c <HAL_DMA_Abort_IT+0xd4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d022      	beq.n	8001434 <HAL_DMA_Abort_IT+0x9c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <HAL_DMA_Abort_IT+0xd8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d01a      	beq.n	800142e <HAL_DMA_Abort_IT+0x96>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1d      	ldr	r2, [pc, #116]	; (8001474 <HAL_DMA_Abort_IT+0xdc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d012      	beq.n	8001428 <HAL_DMA_Abort_IT+0x90>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_DMA_Abort_IT+0xe0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d00a      	beq.n	8001422 <HAL_DMA_Abort_IT+0x8a>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_DMA_Abort_IT+0xe4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d102      	bne.n	800141c <HAL_DMA_Abort_IT+0x84>
 8001416:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800141a:	e00e      	b.n	800143a <HAL_DMA_Abort_IT+0xa2>
 800141c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001420:	e00b      	b.n	800143a <HAL_DMA_Abort_IT+0xa2>
 8001422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001426:	e008      	b.n	800143a <HAL_DMA_Abort_IT+0xa2>
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	e005      	b.n	800143a <HAL_DMA_Abort_IT+0xa2>
 800142e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001432:	e002      	b.n	800143a <HAL_DMA_Abort_IT+0xa2>
 8001434:	2310      	movs	r3, #16
 8001436:	e000      	b.n	800143a <HAL_DMA_Abort_IT+0xa2>
 8001438:	2301      	movs	r3, #1
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_DMA_Abort_IT+0xe8>)
 800143c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	4798      	blx	r3
    } 
  }
  return status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40020008 	.word	0x40020008
 800146c:	4002001c 	.word	0x4002001c
 8001470:	40020030 	.word	0x40020030
 8001474:	40020044 	.word	0x40020044
 8001478:	40020058 	.word	0x40020058
 800147c:	4002006c 	.word	0x4002006c
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e169      	b.n	800176c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001498:	2201      	movs	r2, #1
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8158 	bne.w	8001766 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a9a      	ldr	r2, [pc, #616]	; (8001724 <HAL_GPIO_Init+0x2a0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d05e      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014c0:	4a98      	ldr	r2, [pc, #608]	; (8001724 <HAL_GPIO_Init+0x2a0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d875      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014c6:	4a98      	ldr	r2, [pc, #608]	; (8001728 <HAL_GPIO_Init+0x2a4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d058      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014cc:	4a96      	ldr	r2, [pc, #600]	; (8001728 <HAL_GPIO_Init+0x2a4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d86f      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014d2:	4a96      	ldr	r2, [pc, #600]	; (800172c <HAL_GPIO_Init+0x2a8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d052      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014d8:	4a94      	ldr	r2, [pc, #592]	; (800172c <HAL_GPIO_Init+0x2a8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d869      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014de:	4a94      	ldr	r2, [pc, #592]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04c      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014e4:	4a92      	ldr	r2, [pc, #584]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d863      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014ea:	4a92      	ldr	r2, [pc, #584]	; (8001734 <HAL_GPIO_Init+0x2b0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d046      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014f0:	4a90      	ldr	r2, [pc, #576]	; (8001734 <HAL_GPIO_Init+0x2b0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d85d      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d82a      	bhi.n	8001550 <HAL_GPIO_Init+0xcc>
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d859      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <HAL_GPIO_Init+0x80>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	0800157f 	.word	0x0800157f
 8001508:	08001559 	.word	0x08001559
 800150c:	0800156b 	.word	0x0800156b
 8001510:	080015ad 	.word	0x080015ad
 8001514:	080015b3 	.word	0x080015b3
 8001518:	080015b3 	.word	0x080015b3
 800151c:	080015b3 	.word	0x080015b3
 8001520:	080015b3 	.word	0x080015b3
 8001524:	080015b3 	.word	0x080015b3
 8001528:	080015b3 	.word	0x080015b3
 800152c:	080015b3 	.word	0x080015b3
 8001530:	080015b3 	.word	0x080015b3
 8001534:	080015b3 	.word	0x080015b3
 8001538:	080015b3 	.word	0x080015b3
 800153c:	080015b3 	.word	0x080015b3
 8001540:	080015b3 	.word	0x080015b3
 8001544:	080015b3 	.word	0x080015b3
 8001548:	08001561 	.word	0x08001561
 800154c:	08001575 	.word	0x08001575
 8001550:	4a79      	ldr	r2, [pc, #484]	; (8001738 <HAL_GPIO_Init+0x2b4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001556:	e02c      	b.n	80015b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e029      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e024      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	3308      	adds	r3, #8
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e01f      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	330c      	adds	r3, #12
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e01a      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001586:	2304      	movs	r3, #4
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e013      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	611a      	str	r2, [r3, #16]
          break;
 800159e:	e009      	b.n	80015b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a0:	2308      	movs	r3, #8
 80015a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	615a      	str	r2, [r3, #20]
          break;
 80015aa:	e003      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          break;
 80015b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2bff      	cmp	r3, #255	; 0xff
 80015b8:	d801      	bhi.n	80015be <HAL_GPIO_Init+0x13a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_Init+0x13e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3304      	adds	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d802      	bhi.n	80015d0 <HAL_GPIO_Init+0x14c>
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x152>
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	3b08      	subs	r3, #8
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	210f      	movs	r1, #15
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	431a      	orrs	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80b1 	beq.w	8001766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001604:	4b4d      	ldr	r3, [pc, #308]	; (800173c <HAL_GPIO_Init+0x2b8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x2b8>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b4a      	ldr	r3, [pc, #296]	; (800173c <HAL_GPIO_Init+0x2b8>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800161c:	4a48      	ldr	r2, [pc, #288]	; (8001740 <HAL_GPIO_Init+0x2bc>)
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_GPIO_Init+0x1ec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <HAL_GPIO_Init+0x2c4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1e8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3e      	ldr	r2, [pc, #248]	; (800174c <HAL_GPIO_Init+0x2c8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1e4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <HAL_GPIO_Init+0x2cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1e0>
 8001660:	2303      	movs	r3, #3
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001664:	2304      	movs	r3, #4
 8001666:	e004      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001668:	2302      	movs	r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001670:	2300      	movs	r3, #0
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001682:	492f      	ldr	r1, [pc, #188]	; (8001740 <HAL_GPIO_Init+0x2bc>)
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	492c      	ldr	r1, [pc, #176]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4928      	ldr	r1, [pc, #160]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4922      	ldr	r1, [pc, #136]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	491e      	ldr	r1, [pc, #120]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	4918      	ldr	r1, [pc, #96]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	4914      	ldr	r1, [pc, #80]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 8001704:	4013      	ands	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d021      	beq.n	8001758 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	490e      	ldr	r1, [pc, #56]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
 8001720:	e021      	b.n	8001766 <HAL_GPIO_Init+0x2e2>
 8001722:	bf00      	nop
 8001724:	10320000 	.word	0x10320000
 8001728:	10310000 	.word	0x10310000
 800172c:	10220000 	.word	0x10220000
 8001730:	10210000 	.word	0x10210000
 8001734:	10120000 	.word	0x10120000
 8001738:	10110000 	.word	0x10110000
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	40010800 	.word	0x40010800
 8001748:	40010c00 	.word	0x40010c00
 800174c:	40011000 	.word	0x40011000
 8001750:	40011400 	.word	0x40011400
 8001754:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_GPIO_Init+0x304>)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	43db      	mvns	r3, r3
 8001760:	4909      	ldr	r1, [pc, #36]	; (8001788 <HAL_GPIO_Init+0x304>)
 8001762:	4013      	ands	r3, r2
 8001764:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	3301      	adds	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	f47f ae8e 	bne.w	8001498 <HAL_GPIO_Init+0x14>
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	372c      	adds	r7, #44	; 0x2c
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e272      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8087 	beq.w	80018ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ac:	4b92      	ldr	r3, [pc, #584]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d00c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b8:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d112      	bne.n	80017ea <HAL_RCC_OscConfig+0x5e>
 80017c4:	4b8c      	ldr	r3, [pc, #560]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b89      	ldr	r3, [pc, #548]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d06c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x12c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d168      	bne.n	80018b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e24c      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x76>
 80017f4:	4b80      	ldr	r3, [pc, #512]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a7f      	ldr	r2, [pc, #508]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e02e      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x98>
 800180a:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7a      	ldr	r2, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b78      	ldr	r3, [pc, #480]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a77      	ldr	r2, [pc, #476]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e01d      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0xbc>
 800182e:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a71      	ldr	r2, [pc, #452]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0xd4>
 8001848:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a6a      	ldr	r2, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800184e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a67      	ldr	r2, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800185a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fc44 	bl	80010f4 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fc40 	bl	80010f4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e200      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0xe4>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fc30 	bl	80010f4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fc2c 	bl	80010f4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e1ec      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x10c>
 80018b6:	e000      	b.n	80018ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d063      	beq.n	800198e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c6:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018d2:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d11c      	bne.n	8001918 <HAL_RCC_OscConfig+0x18c>
 80018de:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d116      	bne.n	8001918 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_OscConfig+0x176>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1c0      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4939      	ldr	r1, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e03a      	b.n	800198e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff fbe5 	bl	80010f4 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff fbe1 	bl	80010f4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1a1      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4927      	ldr	r1, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
 8001960:	e015      	b.n	800198e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_RCC_OscConfig+0x270>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fbc4 	bl	80010f4 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff fbc0 	bl	80010f4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e180      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d03a      	beq.n	8001a10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d019      	beq.n	80019d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a8:	f7ff fba4 	bl	80010f4 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fba0 	bl	80010f4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e160      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 fad8 	bl	8001f84 <RCC_Delay>
 80019d4:	e01c      	b.n	8001a10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff fb8a 	bl	80010f4 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e2:	e00f      	b.n	8001a04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e4:	f7ff fb86 	bl	80010f4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d908      	bls.n	8001a04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e146      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	42420000 	.word	0x42420000
 8001a00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	4b92      	ldr	r3, [pc, #584]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e9      	bne.n	80019e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80a6 	beq.w	8001b6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a22:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a87      	ldr	r2, [pc, #540]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4a:	4b82      	ldr	r3, [pc, #520]	; (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a56:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a7e      	ldr	r2, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb47 	bl	80010f4 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7ff fb43 	bl	80010f4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e103      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <HAL_RCC_OscConfig+0x4c8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x312>
 8001a90:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	e02d      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x334>
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a69      	ldr	r2, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4a66      	ldr	r2, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6213      	str	r3, [r2, #32]
 8001abe:	e01c      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x356>
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4a60      	ldr	r2, [pc, #384]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6213      	str	r3, [r2, #32]
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x36e>
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a5a      	ldr	r2, [pc, #360]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	4b58      	ldr	r3, [pc, #352]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff faf7 	bl	80010f4 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff faf3 	bl	80010f4 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0b1      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <HAL_RCC_OscConfig+0x37e>
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fae1 	bl	80010f4 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fadd 	bl	80010f4 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e09b      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	4a3b      	ldr	r2, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8087 	beq.w	8001c82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d061      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d146      	bne.n	8001c16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fab1 	bl	80010f4 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff faad 	bl	80010f4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e06d      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbc:	d108      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	4921      	ldr	r1, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a19      	ldr	r1, [r3, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	430b      	orrs	r3, r1
 8001be2:	491b      	ldr	r1, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fa81 	bl	80010f4 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fa7d 	bl	80010f4 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e03d      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x46a>
 8001c14:	e035      	b.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_OscConfig+0x4cc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fa6a 	bl	80010f4 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff fa66 	bl	80010f4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e026      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x498>
 8001c42:	e01e      	b.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e019      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x500>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d0      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d910      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4965      	ldr	r1, [pc, #404]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0b8      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	494d      	ldr	r1, [pc, #308]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d040      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d115      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e07f      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e073      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e06b      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f023 0203 	bic.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4936      	ldr	r1, [pc, #216]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d80:	f7ff f9b8 	bl	80010f4 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff f9b4 	bl	80010f4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e053      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 020c 	and.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1eb      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d210      	bcs.n	8001de0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	4922      	ldr	r1, [pc, #136]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e032      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4916      	ldr	r1, [pc, #88]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	490e      	ldr	r1, [pc, #56]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1e:	f000 f821 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	490a      	ldr	r1, [pc, #40]	; (8001e58 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	5ccb      	ldrb	r3, [r1, r3]
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x1cc>)
 8001e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x1d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f916 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40022000 	.word	0x40022000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08003f48 	.word	0x08003f48
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b490      	push	{r4, r7}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e6a:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e6c:	1d3c      	adds	r4, r7, #4
 8001e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e74:	f240 2301 	movw	r3, #513	; 0x201
 8001e78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d002      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d003      	beq.n	8001eaa <HAL_RCC_GetSysClockFreq+0x46>
 8001ea2:	e02b      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ea6:	623b      	str	r3, [r7, #32]
      break;
 8001ea8:	e02b      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	0c9b      	lsrs	r3, r3, #18
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3328      	adds	r3, #40	; 0x28
 8001eb4:	443b      	add	r3, r7
 8001eb6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	0c5b      	lsrs	r3, r3, #17
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	3328      	adds	r3, #40	; 0x28
 8001ed2:	443b      	add	r3, r7
 8001ed4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ed8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ede:	fb03 f202 	mul.w	r2, r3, r2
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	e004      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	623b      	str	r3, [r7, #32]
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001efe:	623b      	str	r3, [r7, #32]
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	6a3b      	ldr	r3, [r7, #32]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc90      	pop	{r4, r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	08003f38 	.word	0x08003f38
 8001f14:	40021000 	.word	0x40021000
 8001f18:	007a1200 	.word	0x007a1200
 8001f1c:	003d0900 	.word	0x003d0900

08001f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b02      	ldr	r3, [pc, #8]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000004 	.word	0x20000004

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f38:	f7ff fff2 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003f58 	.word	0x08003f58

08001f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0adb      	lsrs	r3, r3, #11
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4903      	ldr	r1, [pc, #12]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08003f58 	.word	0x08003f58

08001f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <RCC_Delay+0x34>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <RCC_Delay+0x38>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a5b      	lsrs	r3, r3, #9
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa0:	bf00      	nop
  }
  while (Delay --);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	60fa      	str	r2, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <RCC_Delay+0x1c>
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e041      	b.n	8002056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe ff4c 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fa70 	bl	80024e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d001      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e03a      	b.n	80020ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <HAL_TIM_Base_Start_IT+0x98>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00e      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x58>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d009      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x58>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <HAL_TIM_Base_Start_IT+0x9c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x58>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <HAL_TIM_Base_Start_IT+0xa0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d010      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	e007      	b.n	80020ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800

08002104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0202 	mvn.w	r2, #2
 8002130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f9b1 	bl	80024ae <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f9a4 	bl	800249c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f9b3 	bl	80024c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d122      	bne.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d11b      	bne.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0204 	mvn.w	r2, #4
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f987 	bl	80024ae <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f97a 	bl	800249c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f989 	bl	80024c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d122      	bne.n	8002208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d11b      	bne.n	8002208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0208 	mvn.w	r2, #8
 80021d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2204      	movs	r2, #4
 80021de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f95d 	bl	80024ae <HAL_TIM_IC_CaptureCallback>
 80021f4:	e005      	b.n	8002202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f950 	bl	800249c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f95f 	bl	80024c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b10      	cmp	r3, #16
 8002214:	d122      	bne.n	800225c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b10      	cmp	r3, #16
 8002222:	d11b      	bne.n	800225c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0210 	mvn.w	r2, #16
 800222c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2208      	movs	r2, #8
 8002232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f933 	bl	80024ae <HAL_TIM_IC_CaptureCallback>
 8002248:	e005      	b.n	8002256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f926 	bl	800249c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f935 	bl	80024c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0201 	mvn.w	r2, #1
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fbd0 	bl	8000a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b80      	cmp	r3, #128	; 0x80
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b80      	cmp	r3, #128	; 0x80
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa77 	bl	80027a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f8f9 	bl	80024d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0220 	mvn.w	r2, #32
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fa42 	bl	8002790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIM_ConfigClockSource+0x18>
 8002328:	2302      	movs	r3, #2
 800232a:	e0b3      	b.n	8002494 <HAL_TIM_ConfigClockSource+0x180>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002352:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d03e      	beq.n	80023e4 <HAL_TIM_ConfigClockSource+0xd0>
 8002366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236a:	f200 8087 	bhi.w	800247c <HAL_TIM_ConfigClockSource+0x168>
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	f000 8085 	beq.w	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d87f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x168>
 800237c:	2b70      	cmp	r3, #112	; 0x70
 800237e:	d01a      	beq.n	80023b6 <HAL_TIM_ConfigClockSource+0xa2>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d87b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x168>
 8002384:	2b60      	cmp	r3, #96	; 0x60
 8002386:	d050      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x116>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d877      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x168>
 800238c:	2b50      	cmp	r3, #80	; 0x50
 800238e:	d03c      	beq.n	800240a <HAL_TIM_ConfigClockSource+0xf6>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d873      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x168>
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d058      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x136>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d86f      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x168>
 800239c:	2b30      	cmp	r3, #48	; 0x30
 800239e:	d064      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x156>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d86b      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x168>
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d060      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x156>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d867      	bhi.n	800247c <HAL_TIM_ConfigClockSource+0x168>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d05c      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x156>
 80023b0:	2b10      	cmp	r3, #16
 80023b2:	d05a      	beq.n	800246a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023b4:	e062      	b.n	800247c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f000 f966 	bl	8002696 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	609a      	str	r2, [r3, #8]
      break;
 80023e2:	e04e      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f000 f94f 	bl	8002696 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002406:	609a      	str	r2, [r3, #8]
      break;
 8002408:	e03b      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	461a      	mov	r2, r3
 8002418:	f000 f8c6 	bl	80025a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2150      	movs	r1, #80	; 0x50
 8002422:	4618      	mov	r0, r3
 8002424:	f000 f91d 	bl	8002662 <TIM_ITRx_SetConfig>
      break;
 8002428:	e02b      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	461a      	mov	r2, r3
 8002438:	f000 f8e4 	bl	8002604 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2160      	movs	r1, #96	; 0x60
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f90d 	bl	8002662 <TIM_ITRx_SetConfig>
      break;
 8002448:	e01b      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f000 f8a6 	bl	80025a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f8fd 	bl	8002662 <TIM_ITRx_SetConfig>
      break;
 8002468:	e00b      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f000 f8f4 	bl	8002662 <TIM_ITRx_SetConfig>
        break;
 800247a:	e002      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800247c:	bf00      	nop
 800247e:	e000      	b.n	8002482 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002480:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a29      	ldr	r2, [pc, #164]	; (800259c <TIM_Base_SetConfig+0xb8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00b      	beq.n	8002514 <TIM_Base_SetConfig+0x30>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0x30>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a26      	ldr	r2, [pc, #152]	; (80025a0 <TIM_Base_SetConfig+0xbc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0x30>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <TIM_Base_SetConfig+0xc0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <TIM_Base_SetConfig+0xb8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00b      	beq.n	8002546 <TIM_Base_SetConfig+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d007      	beq.n	8002546 <TIM_Base_SetConfig+0x62>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a19      	ldr	r2, [pc, #100]	; (80025a0 <TIM_Base_SetConfig+0xbc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d003      	beq.n	8002546 <TIM_Base_SetConfig+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <TIM_Base_SetConfig+0xc0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d108      	bne.n	8002558 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <TIM_Base_SetConfig+0xb8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d103      	bne.n	800258c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	615a      	str	r2, [r3, #20]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40000800 	.word	0x40000800

080025a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	f023 0201 	bic.w	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f023 030a 	bic.w	r3, r3, #10
 80025e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	621a      	str	r2, [r3, #32]
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f023 0210 	bic.w	r2, r3, #16
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800262e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	031b      	lsls	r3, r3, #12
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002640:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	621a      	str	r2, [r3, #32]
}
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	f043 0307 	orr.w	r3, r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002696:	b480      	push	{r7}
 8002698:	b087      	sub	sp, #28
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	021a      	lsls	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4313      	orrs	r3, r2
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	609a      	str	r2, [r3, #8]
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e046      	b.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a16      	ldr	r2, [pc, #88]	; (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00e      	beq.n	800274e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002738:	d009      	beq.n	800274e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d004      	beq.n	800274e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10c      	bne.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	4313      	orrs	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40000400 	.word	0x40000400
 800278c:	40000800 	.word	0x40000800

08002790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e03f      	b.n	8002846 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fb78 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	; 0x24
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fbed 	bl	8002fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800280c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800281c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800282c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800284e:	b480      	push	{r7}
 8002850:	b085      	sub	sp, #20
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	d130      	bne.n	80028ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_UART_Transmit_IT+0x26>
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e029      	b.n	80028cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_UART_Transmit_IT+0x38>
 8002882:	2302      	movs	r3, #2
 8002884:	e022      	b.n	80028cc <HAL_UART_Transmit_IT+0x7e>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2221      	movs	r2, #33	; 0x21
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	4613      	mov	r3, r2
 80028e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d11d      	bne.n	800292c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_UART_Receive_IT+0x26>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e016      	b.n	800292e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_UART_Receive_IT+0x38>
 800290a:	2302      	movs	r3, #2
 800290c:	e00f      	b.n	800292e <HAL_UART_Receive_IT+0x58>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	461a      	mov	r2, r3
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f9cf 	bl	8002cc6 <UART_Start_Receive_IT>
 8002928:	4603      	mov	r3, r0
 800292a:	e000      	b.n	800292e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_UART_IRQHandler+0x52>
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa7f 	bl	8002e86 <UART_Receive_IT>
      return;
 8002988:	e17b      	b.n	8002c82 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80b1 	beq.w	8002af4 <HAL_UART_IRQHandler+0x1bc>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_UART_IRQHandler+0x70>
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 80a6 	beq.w	8002af4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_UART_IRQHandler+0x90>
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_UART_IRQHandler+0xb0>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f043 0202 	orr.w	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_UART_IRQHandler+0xd0>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f043 0204 	orr.w	r2, r3, #4
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00f      	beq.n	8002a32 <HAL_UART_IRQHandler+0xfa>
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <HAL_UART_IRQHandler+0xee>
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0208 	orr.w	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 811e 	beq.w	8002c78 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_UART_IRQHandler+0x11e>
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa18 	bl	8002e86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d102      	bne.n	8002a7e <HAL_UART_IRQHandler+0x146>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d031      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f95a 	bl	8002d38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d023      	beq.n	8002ada <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d013      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	4a76      	ldr	r2, [pc, #472]	; (8002c88 <HAL_UART_IRQHandler+0x350>)
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fc6e 	bl	8001398 <HAL_DMA_Abort_IT>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002acc:	4610      	mov	r0, r2
 8002ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad0:	e00e      	b.n	8002af0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8e3 	bl	8002c9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	e00a      	b.n	8002af0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8df 	bl	8002c9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	e006      	b.n	8002af0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8db 	bl	8002c9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002aee:	e0c3      	b.n	8002c78 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	bf00      	nop
    return;
 8002af2:	e0c1      	b.n	8002c78 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f040 80a1 	bne.w	8002c40 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 809b 	beq.w	8002c40 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8095 	beq.w	8002c40 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04e      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b44:	8a3b      	ldrh	r3, [r7, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8098 	beq.w	8002c7c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b50:	8a3a      	ldrh	r2, [r7, #16]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	f080 8092 	bcs.w	8002c7c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8a3a      	ldrh	r2, [r7, #16]
 8002b5c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d02b      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b76:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b96:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0210 	bic.w	r2, r2, #16
 8002bb4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fbb1 	bl	8001322 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f86d 	bl	8002cb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002bd6:	e051      	b.n	8002c7c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d047      	beq.n	8002c80 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002bf0:	8a7b      	ldrh	r3, [r7, #18]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d044      	beq.n	8002c80 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c04:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0210 	bic.w	r2, r2, #16
 8002c32:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c34:	8a7b      	ldrh	r3, [r7, #18]
 8002c36:	4619      	mov	r1, r3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f839 	bl	8002cb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c3e:	e01f      	b.n	8002c80 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_UART_IRQHandler+0x324>
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f8af 	bl	8002db8 <UART_Transmit_IT>
    return;
 8002c5a:	e012      	b.n	8002c82 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <HAL_UART_IRQHandler+0x34a>
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f8f0 	bl	8002e56 <UART_EndTransmit_IT>
    return;
 8002c76:	e004      	b.n	8002c82 <HAL_UART_IRQHandler+0x34a>
    return;
 8002c78:	bf00      	nop
 8002c7a:	e002      	b.n	8002c82 <HAL_UART_IRQHandler+0x34a>
      return;
 8002c7c:	bf00      	nop
 8002c7e:	e000      	b.n	8002c82 <HAL_UART_IRQHandler+0x34a>
      return;
 8002c80:	bf00      	nop
  }
}
 8002c82:	3728      	adds	r7, #40	; 0x28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	08002d91 	.word	0x08002d91

08002c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2222      	movs	r2, #34	; 0x22
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0220 	orr.w	r2, r2, #32
 8002d2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d107      	bne.n	8002d78 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0210 	bic.w	r2, r2, #16
 8002d76:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff ff77 	bl	8002c9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b21      	cmp	r3, #33	; 0x21
 8002dca:	d13e      	bne.n	8002e4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd4:	d114      	bne.n	8002e00 <UART_Transmit_IT+0x48>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d110      	bne.n	8002e00 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002df2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]
 8002dfe:	e008      	b.n	8002e12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	1c59      	adds	r1, r3, #1
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6211      	str	r1, [r2, #32]
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e000      	b.n	8002e4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ff08 	bl	8002c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b22      	cmp	r3, #34	; 0x22
 8002e98:	f040 8099 	bne.w	8002fce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea4:	d117      	bne.n	8002ed6 <UART_Receive_IT+0x50>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d113      	bne.n	8002ed6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	1c9a      	adds	r2, r3, #2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed4:	e026      	b.n	8002f24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d007      	beq.n	8002efa <UART_Receive_IT+0x74>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10a      	bne.n	8002f08 <UART_Receive_IT+0x82>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e008      	b.n	8002f1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4619      	mov	r1, r3
 8002f32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d148      	bne.n	8002fca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0220 	bic.w	r2, r2, #32
 8002f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d123      	bne.n	8002fc0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0210 	bic.w	r2, r2, #16
 8002f8c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d10a      	bne.n	8002fb2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff fe79 	bl	8002cb0 <HAL_UARTEx_RxEventCallback>
 8002fbe:	e002      	b.n	8002fc6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7fd fd69 	bl	8000a98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e002      	b.n	8002fd0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003012:	f023 030c 	bic.w	r3, r3, #12
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	430b      	orrs	r3, r1
 800301e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a2c      	ldr	r2, [pc, #176]	; (80030ec <UART_SetConfig+0x114>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d103      	bne.n	8003048 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003040:	f7fe ff8c 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	e002      	b.n	800304e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003048:	f7fe ff74 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 800304c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	009a      	lsls	r2, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <UART_SetConfig+0x118>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	0119      	lsls	r1, r3, #4
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009a      	lsls	r2, r3, #2
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fbb2 f2f3 	udiv	r2, r2, r3
 8003084:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <UART_SetConfig+0x118>)
 8003086:	fba3 0302 	umull	r0, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	2064      	movs	r0, #100	; 0x64
 800308e:	fb00 f303 	mul.w	r3, r0, r3
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	3332      	adds	r3, #50	; 0x32
 8003098:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <UART_SetConfig+0x118>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a4:	4419      	add	r1, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	009a      	lsls	r2, r3, #2
 80030b0:	441a      	add	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <UART_SetConfig+0x118>)
 80030be:	fba3 0302 	umull	r0, r3, r3, r2
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	2064      	movs	r0, #100	; 0x64
 80030c6:	fb00 f303 	mul.w	r3, r0, r3
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	3332      	adds	r3, #50	; 0x32
 80030d0:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <UART_SetConfig+0x118>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	f003 020f 	and.w	r2, r3, #15
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	440a      	add	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40013800 	.word	0x40013800
 80030f0:	51eb851f 	.word	0x51eb851f

080030f4 <__errno>:
 80030f4:	4b01      	ldr	r3, [pc, #4]	; (80030fc <__errno+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000010 	.word	0x20000010

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	2600      	movs	r6, #0
 8003104:	4d0c      	ldr	r5, [pc, #48]	; (8003138 <__libc_init_array+0x38>)
 8003106:	4c0d      	ldr	r4, [pc, #52]	; (800313c <__libc_init_array+0x3c>)
 8003108:	1b64      	subs	r4, r4, r5
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	f000 ff04 	bl	8003f1c <_init>
 8003114:	2600      	movs	r6, #0
 8003116:	4d0a      	ldr	r5, [pc, #40]	; (8003140 <__libc_init_array+0x40>)
 8003118:	4c0a      	ldr	r4, [pc, #40]	; (8003144 <__libc_init_array+0x44>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f855 3b04 	ldr.w	r3, [r5], #4
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	08003f90 	.word	0x08003f90
 800313c:	08003f90 	.word	0x08003f90
 8003140:	08003f90 	.word	0x08003f90
 8003144:	08003f94 	.word	0x08003f94

08003148 <memset>:
 8003148:	4603      	mov	r3, r0
 800314a:	4402      	add	r2, r0
 800314c:	4293      	cmp	r3, r2
 800314e:	d100      	bne.n	8003152 <memset+0xa>
 8003150:	4770      	bx	lr
 8003152:	f803 1b01 	strb.w	r1, [r3], #1
 8003156:	e7f9      	b.n	800314c <memset+0x4>

08003158 <pow>:
 8003158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800315c:	4614      	mov	r4, r2
 800315e:	461d      	mov	r5, r3
 8003160:	4680      	mov	r8, r0
 8003162:	4689      	mov	r9, r1
 8003164:	f000 f860 	bl	8003228 <__ieee754_pow>
 8003168:	4622      	mov	r2, r4
 800316a:	4606      	mov	r6, r0
 800316c:	460f      	mov	r7, r1
 800316e:	462b      	mov	r3, r5
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd fc42 	bl	80009fc <__aeabi_dcmpun>
 8003178:	bbc8      	cbnz	r0, 80031ee <pow+0x96>
 800317a:	2200      	movs	r2, #0
 800317c:	2300      	movs	r3, #0
 800317e:	4640      	mov	r0, r8
 8003180:	4649      	mov	r1, r9
 8003182:	f7fd fc09 	bl	8000998 <__aeabi_dcmpeq>
 8003186:	b1b8      	cbz	r0, 80031b8 <pow+0x60>
 8003188:	2200      	movs	r2, #0
 800318a:	2300      	movs	r3, #0
 800318c:	4620      	mov	r0, r4
 800318e:	4629      	mov	r1, r5
 8003190:	f7fd fc02 	bl	8000998 <__aeabi_dcmpeq>
 8003194:	2800      	cmp	r0, #0
 8003196:	d141      	bne.n	800321c <pow+0xc4>
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f000 fe39 	bl	8003e12 <finite>
 80031a0:	b328      	cbz	r0, 80031ee <pow+0x96>
 80031a2:	2200      	movs	r2, #0
 80031a4:	2300      	movs	r3, #0
 80031a6:	4620      	mov	r0, r4
 80031a8:	4629      	mov	r1, r5
 80031aa:	f7fd fbff 	bl	80009ac <__aeabi_dcmplt>
 80031ae:	b1f0      	cbz	r0, 80031ee <pow+0x96>
 80031b0:	f7ff ffa0 	bl	80030f4 <__errno>
 80031b4:	2322      	movs	r3, #34	; 0x22
 80031b6:	e019      	b.n	80031ec <pow+0x94>
 80031b8:	4630      	mov	r0, r6
 80031ba:	4639      	mov	r1, r7
 80031bc:	f000 fe29 	bl	8003e12 <finite>
 80031c0:	b9c8      	cbnz	r0, 80031f6 <pow+0x9e>
 80031c2:	4640      	mov	r0, r8
 80031c4:	4649      	mov	r1, r9
 80031c6:	f000 fe24 	bl	8003e12 <finite>
 80031ca:	b1a0      	cbz	r0, 80031f6 <pow+0x9e>
 80031cc:	4620      	mov	r0, r4
 80031ce:	4629      	mov	r1, r5
 80031d0:	f000 fe1f 	bl	8003e12 <finite>
 80031d4:	b178      	cbz	r0, 80031f6 <pow+0x9e>
 80031d6:	4632      	mov	r2, r6
 80031d8:	463b      	mov	r3, r7
 80031da:	4630      	mov	r0, r6
 80031dc:	4639      	mov	r1, r7
 80031de:	f7fd fc0d 	bl	80009fc <__aeabi_dcmpun>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d0e4      	beq.n	80031b0 <pow+0x58>
 80031e6:	f7ff ff85 	bl	80030f4 <__errno>
 80031ea:	2321      	movs	r3, #33	; 0x21
 80031ec:	6003      	str	r3, [r0, #0]
 80031ee:	4630      	mov	r0, r6
 80031f0:	4639      	mov	r1, r7
 80031f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f6:	2200      	movs	r2, #0
 80031f8:	2300      	movs	r3, #0
 80031fa:	4630      	mov	r0, r6
 80031fc:	4639      	mov	r1, r7
 80031fe:	f7fd fbcb 	bl	8000998 <__aeabi_dcmpeq>
 8003202:	2800      	cmp	r0, #0
 8003204:	d0f3      	beq.n	80031ee <pow+0x96>
 8003206:	4640      	mov	r0, r8
 8003208:	4649      	mov	r1, r9
 800320a:	f000 fe02 	bl	8003e12 <finite>
 800320e:	2800      	cmp	r0, #0
 8003210:	d0ed      	beq.n	80031ee <pow+0x96>
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f000 fdfc 	bl	8003e12 <finite>
 800321a:	e7c8      	b.n	80031ae <pow+0x56>
 800321c:	2600      	movs	r6, #0
 800321e:	4f01      	ldr	r7, [pc, #4]	; (8003224 <pow+0xcc>)
 8003220:	e7e5      	b.n	80031ee <pow+0x96>
 8003222:	bf00      	nop
 8003224:	3ff00000 	.word	0x3ff00000

08003228 <__ieee754_pow>:
 8003228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322c:	b093      	sub	sp, #76	; 0x4c
 800322e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003232:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003236:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800323a:	4689      	mov	r9, r1
 800323c:	ea56 0102 	orrs.w	r1, r6, r2
 8003240:	4680      	mov	r8, r0
 8003242:	d111      	bne.n	8003268 <__ieee754_pow+0x40>
 8003244:	1803      	adds	r3, r0, r0
 8003246:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800324a:	4152      	adcs	r2, r2
 800324c:	4299      	cmp	r1, r3
 800324e:	4b82      	ldr	r3, [pc, #520]	; (8003458 <__ieee754_pow+0x230>)
 8003250:	4193      	sbcs	r3, r2
 8003252:	f080 84b9 	bcs.w	8003bc8 <__ieee754_pow+0x9a0>
 8003256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800325a:	4640      	mov	r0, r8
 800325c:	4649      	mov	r1, r9
 800325e:	f7fc ff7d 	bl	800015c <__adddf3>
 8003262:	4683      	mov	fp, r0
 8003264:	468c      	mov	ip, r1
 8003266:	e06f      	b.n	8003348 <__ieee754_pow+0x120>
 8003268:	4b7c      	ldr	r3, [pc, #496]	; (800345c <__ieee754_pow+0x234>)
 800326a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800326e:	429c      	cmp	r4, r3
 8003270:	464d      	mov	r5, r9
 8003272:	4682      	mov	sl, r0
 8003274:	dc06      	bgt.n	8003284 <__ieee754_pow+0x5c>
 8003276:	d101      	bne.n	800327c <__ieee754_pow+0x54>
 8003278:	2800      	cmp	r0, #0
 800327a:	d1ec      	bne.n	8003256 <__ieee754_pow+0x2e>
 800327c:	429e      	cmp	r6, r3
 800327e:	dc01      	bgt.n	8003284 <__ieee754_pow+0x5c>
 8003280:	d10f      	bne.n	80032a2 <__ieee754_pow+0x7a>
 8003282:	b172      	cbz	r2, 80032a2 <__ieee754_pow+0x7a>
 8003284:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003288:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800328c:	ea55 050a 	orrs.w	r5, r5, sl
 8003290:	d1e1      	bne.n	8003256 <__ieee754_pow+0x2e>
 8003292:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003296:	18db      	adds	r3, r3, r3
 8003298:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800329c:	4152      	adcs	r2, r2
 800329e:	429d      	cmp	r5, r3
 80032a0:	e7d5      	b.n	800324e <__ieee754_pow+0x26>
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	da39      	bge.n	800331a <__ieee754_pow+0xf2>
 80032a6:	4b6e      	ldr	r3, [pc, #440]	; (8003460 <__ieee754_pow+0x238>)
 80032a8:	429e      	cmp	r6, r3
 80032aa:	dc52      	bgt.n	8003352 <__ieee754_pow+0x12a>
 80032ac:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80032b0:	429e      	cmp	r6, r3
 80032b2:	f340 849c 	ble.w	8003bee <__ieee754_pow+0x9c6>
 80032b6:	1533      	asrs	r3, r6, #20
 80032b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80032bc:	2b14      	cmp	r3, #20
 80032be:	dd0f      	ble.n	80032e0 <__ieee754_pow+0xb8>
 80032c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80032c4:	fa22 f103 	lsr.w	r1, r2, r3
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	4293      	cmp	r3, r2
 80032ce:	f040 848e 	bne.w	8003bee <__ieee754_pow+0x9c6>
 80032d2:	f001 0101 	and.w	r1, r1, #1
 80032d6:	f1c1 0302 	rsb	r3, r1, #2
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	b182      	cbz	r2, 8003300 <__ieee754_pow+0xd8>
 80032de:	e05d      	b.n	800339c <__ieee754_pow+0x174>
 80032e0:	2a00      	cmp	r2, #0
 80032e2:	d159      	bne.n	8003398 <__ieee754_pow+0x170>
 80032e4:	f1c3 0314 	rsb	r3, r3, #20
 80032e8:	fa46 f103 	asr.w	r1, r6, r3
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	42b3      	cmp	r3, r6
 80032f2:	f040 8479 	bne.w	8003be8 <__ieee754_pow+0x9c0>
 80032f6:	f001 0101 	and.w	r1, r1, #1
 80032fa:	f1c1 0302 	rsb	r3, r1, #2
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4b58      	ldr	r3, [pc, #352]	; (8003464 <__ieee754_pow+0x23c>)
 8003302:	429e      	cmp	r6, r3
 8003304:	d132      	bne.n	800336c <__ieee754_pow+0x144>
 8003306:	2f00      	cmp	r7, #0
 8003308:	f280 846a 	bge.w	8003be0 <__ieee754_pow+0x9b8>
 800330c:	4642      	mov	r2, r8
 800330e:	464b      	mov	r3, r9
 8003310:	2000      	movs	r0, #0
 8003312:	4954      	ldr	r1, [pc, #336]	; (8003464 <__ieee754_pow+0x23c>)
 8003314:	f7fd fa02 	bl	800071c <__aeabi_ddiv>
 8003318:	e7a3      	b.n	8003262 <__ieee754_pow+0x3a>
 800331a:	2300      	movs	r3, #0
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	2a00      	cmp	r2, #0
 8003320:	d13c      	bne.n	800339c <__ieee754_pow+0x174>
 8003322:	4b4e      	ldr	r3, [pc, #312]	; (800345c <__ieee754_pow+0x234>)
 8003324:	429e      	cmp	r6, r3
 8003326:	d1eb      	bne.n	8003300 <__ieee754_pow+0xd8>
 8003328:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800332c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003330:	ea53 030a 	orrs.w	r3, r3, sl
 8003334:	f000 8448 	beq.w	8003bc8 <__ieee754_pow+0x9a0>
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <__ieee754_pow+0x240>)
 800333a:	429c      	cmp	r4, r3
 800333c:	dd0b      	ble.n	8003356 <__ieee754_pow+0x12e>
 800333e:	2f00      	cmp	r7, #0
 8003340:	f2c0 8448 	blt.w	8003bd4 <__ieee754_pow+0x9ac>
 8003344:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003348:	4658      	mov	r0, fp
 800334a:	4661      	mov	r1, ip
 800334c:	b013      	add	sp, #76	; 0x4c
 800334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003352:	2302      	movs	r3, #2
 8003354:	e7e2      	b.n	800331c <__ieee754_pow+0xf4>
 8003356:	2f00      	cmp	r7, #0
 8003358:	f04f 0b00 	mov.w	fp, #0
 800335c:	f04f 0c00 	mov.w	ip, #0
 8003360:	daf2      	bge.n	8003348 <__ieee754_pow+0x120>
 8003362:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003366:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800336a:	e7ed      	b.n	8003348 <__ieee754_pow+0x120>
 800336c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003370:	d106      	bne.n	8003380 <__ieee754_pow+0x158>
 8003372:	4642      	mov	r2, r8
 8003374:	464b      	mov	r3, r9
 8003376:	4640      	mov	r0, r8
 8003378:	4649      	mov	r1, r9
 800337a:	f7fd f8a5 	bl	80004c8 <__aeabi_dmul>
 800337e:	e770      	b.n	8003262 <__ieee754_pow+0x3a>
 8003380:	4b3a      	ldr	r3, [pc, #232]	; (800346c <__ieee754_pow+0x244>)
 8003382:	429f      	cmp	r7, r3
 8003384:	d10a      	bne.n	800339c <__ieee754_pow+0x174>
 8003386:	2d00      	cmp	r5, #0
 8003388:	db08      	blt.n	800339c <__ieee754_pow+0x174>
 800338a:	4640      	mov	r0, r8
 800338c:	4649      	mov	r1, r9
 800338e:	b013      	add	sp, #76	; 0x4c
 8003390:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003394:	f000 bc5e 	b.w	8003c54 <__ieee754_sqrt>
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	4640      	mov	r0, r8
 800339e:	4649      	mov	r1, r9
 80033a0:	f000 fd34 	bl	8003e0c <fabs>
 80033a4:	4683      	mov	fp, r0
 80033a6:	468c      	mov	ip, r1
 80033a8:	f1ba 0f00 	cmp.w	sl, #0
 80033ac:	d128      	bne.n	8003400 <__ieee754_pow+0x1d8>
 80033ae:	b124      	cbz	r4, 80033ba <__ieee754_pow+0x192>
 80033b0:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <__ieee754_pow+0x23c>)
 80033b2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d122      	bne.n	8003400 <__ieee754_pow+0x1d8>
 80033ba:	2f00      	cmp	r7, #0
 80033bc:	da07      	bge.n	80033ce <__ieee754_pow+0x1a6>
 80033be:	465a      	mov	r2, fp
 80033c0:	4663      	mov	r3, ip
 80033c2:	2000      	movs	r0, #0
 80033c4:	4927      	ldr	r1, [pc, #156]	; (8003464 <__ieee754_pow+0x23c>)
 80033c6:	f7fd f9a9 	bl	800071c <__aeabi_ddiv>
 80033ca:	4683      	mov	fp, r0
 80033cc:	468c      	mov	ip, r1
 80033ce:	2d00      	cmp	r5, #0
 80033d0:	daba      	bge.n	8003348 <__ieee754_pow+0x120>
 80033d2:	9b00      	ldr	r3, [sp, #0]
 80033d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80033d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80033dc:	4323      	orrs	r3, r4
 80033de:	d108      	bne.n	80033f2 <__ieee754_pow+0x1ca>
 80033e0:	465a      	mov	r2, fp
 80033e2:	4663      	mov	r3, ip
 80033e4:	4658      	mov	r0, fp
 80033e6:	4661      	mov	r1, ip
 80033e8:	f7fc feb6 	bl	8000158 <__aeabi_dsub>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	e790      	b.n	8003314 <__ieee754_pow+0xec>
 80033f2:	9b00      	ldr	r3, [sp, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d1a7      	bne.n	8003348 <__ieee754_pow+0x120>
 80033f8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80033fc:	469c      	mov	ip, r3
 80033fe:	e7a3      	b.n	8003348 <__ieee754_pow+0x120>
 8003400:	0feb      	lsrs	r3, r5, #31
 8003402:	3b01      	subs	r3, #1
 8003404:	930c      	str	r3, [sp, #48]	; 0x30
 8003406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003408:	9b00      	ldr	r3, [sp, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	d104      	bne.n	8003418 <__ieee754_pow+0x1f0>
 800340e:	4642      	mov	r2, r8
 8003410:	464b      	mov	r3, r9
 8003412:	4640      	mov	r0, r8
 8003414:	4649      	mov	r1, r9
 8003416:	e7e7      	b.n	80033e8 <__ieee754_pow+0x1c0>
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <__ieee754_pow+0x248>)
 800341a:	429e      	cmp	r6, r3
 800341c:	f340 80f6 	ble.w	800360c <__ieee754_pow+0x3e4>
 8003420:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003424:	429e      	cmp	r6, r3
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <__ieee754_pow+0x240>)
 8003428:	dd09      	ble.n	800343e <__ieee754_pow+0x216>
 800342a:	429c      	cmp	r4, r3
 800342c:	dc0c      	bgt.n	8003448 <__ieee754_pow+0x220>
 800342e:	2f00      	cmp	r7, #0
 8003430:	da0c      	bge.n	800344c <__ieee754_pow+0x224>
 8003432:	2000      	movs	r0, #0
 8003434:	b013      	add	sp, #76	; 0x4c
 8003436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800343a:	f000 bce2 	b.w	8003e02 <__math_oflow>
 800343e:	429c      	cmp	r4, r3
 8003440:	dbf5      	blt.n	800342e <__ieee754_pow+0x206>
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <__ieee754_pow+0x23c>)
 8003444:	429c      	cmp	r4, r3
 8003446:	dd15      	ble.n	8003474 <__ieee754_pow+0x24c>
 8003448:	2f00      	cmp	r7, #0
 800344a:	dcf2      	bgt.n	8003432 <__ieee754_pow+0x20a>
 800344c:	2000      	movs	r0, #0
 800344e:	b013      	add	sp, #76	; 0x4c
 8003450:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003454:	f000 bcd0 	b.w	8003df8 <__math_uflow>
 8003458:	fff00000 	.word	0xfff00000
 800345c:	7ff00000 	.word	0x7ff00000
 8003460:	433fffff 	.word	0x433fffff
 8003464:	3ff00000 	.word	0x3ff00000
 8003468:	3fefffff 	.word	0x3fefffff
 800346c:	3fe00000 	.word	0x3fe00000
 8003470:	41e00000 	.word	0x41e00000
 8003474:	4661      	mov	r1, ip
 8003476:	2200      	movs	r2, #0
 8003478:	4658      	mov	r0, fp
 800347a:	4b5f      	ldr	r3, [pc, #380]	; (80035f8 <__ieee754_pow+0x3d0>)
 800347c:	f7fc fe6c 	bl	8000158 <__aeabi_dsub>
 8003480:	a355      	add	r3, pc, #340	; (adr r3, 80035d8 <__ieee754_pow+0x3b0>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	4604      	mov	r4, r0
 8003488:	460d      	mov	r5, r1
 800348a:	f7fd f81d 	bl	80004c8 <__aeabi_dmul>
 800348e:	a354      	add	r3, pc, #336	; (adr r3, 80035e0 <__ieee754_pow+0x3b8>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	4606      	mov	r6, r0
 8003496:	460f      	mov	r7, r1
 8003498:	4620      	mov	r0, r4
 800349a:	4629      	mov	r1, r5
 800349c:	f7fd f814 	bl	80004c8 <__aeabi_dmul>
 80034a0:	2200      	movs	r2, #0
 80034a2:	4682      	mov	sl, r0
 80034a4:	468b      	mov	fp, r1
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	4b54      	ldr	r3, [pc, #336]	; (80035fc <__ieee754_pow+0x3d4>)
 80034ac:	f7fd f80c 	bl	80004c8 <__aeabi_dmul>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	a14c      	add	r1, pc, #304	; (adr r1, 80035e8 <__ieee754_pow+0x3c0>)
 80034b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034ba:	f7fc fe4d 	bl	8000158 <__aeabi_dsub>
 80034be:	4622      	mov	r2, r4
 80034c0:	462b      	mov	r3, r5
 80034c2:	f7fd f801 	bl	80004c8 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	2000      	movs	r0, #0
 80034cc:	494c      	ldr	r1, [pc, #304]	; (8003600 <__ieee754_pow+0x3d8>)
 80034ce:	f7fc fe43 	bl	8000158 <__aeabi_dsub>
 80034d2:	4622      	mov	r2, r4
 80034d4:	462b      	mov	r3, r5
 80034d6:	4680      	mov	r8, r0
 80034d8:	4689      	mov	r9, r1
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f7fc fff3 	bl	80004c8 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4640      	mov	r0, r8
 80034e8:	4649      	mov	r1, r9
 80034ea:	f7fc ffed 	bl	80004c8 <__aeabi_dmul>
 80034ee:	a340      	add	r3, pc, #256	; (adr r3, 80035f0 <__ieee754_pow+0x3c8>)
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f7fc ffe8 	bl	80004c8 <__aeabi_dmul>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4650      	mov	r0, sl
 80034fe:	4659      	mov	r1, fp
 8003500:	f7fc fe2a 	bl	8000158 <__aeabi_dsub>
 8003504:	f04f 0a00 	mov.w	sl, #0
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4604      	mov	r4, r0
 800350e:	460d      	mov	r5, r1
 8003510:	4630      	mov	r0, r6
 8003512:	4639      	mov	r1, r7
 8003514:	f7fc fe22 	bl	800015c <__adddf3>
 8003518:	4632      	mov	r2, r6
 800351a:	463b      	mov	r3, r7
 800351c:	4650      	mov	r0, sl
 800351e:	468b      	mov	fp, r1
 8003520:	f7fc fe1a 	bl	8000158 <__aeabi_dsub>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4620      	mov	r0, r4
 800352a:	4629      	mov	r1, r5
 800352c:	f7fc fe14 	bl	8000158 <__aeabi_dsub>
 8003530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003534:	9b00      	ldr	r3, [sp, #0]
 8003536:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003538:	3b01      	subs	r3, #1
 800353a:	4313      	orrs	r3, r2
 800353c:	f04f 0600 	mov.w	r6, #0
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	bf0c      	ite	eq
 8003546:	4b2f      	ldreq	r3, [pc, #188]	; (8003604 <__ieee754_pow+0x3dc>)
 8003548:	4b2b      	ldrne	r3, [pc, #172]	; (80035f8 <__ieee754_pow+0x3d0>)
 800354a:	4604      	mov	r4, r0
 800354c:	460d      	mov	r5, r1
 800354e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003552:	e9cd 2300 	strd	r2, r3, [sp]
 8003556:	4632      	mov	r2, r6
 8003558:	463b      	mov	r3, r7
 800355a:	f7fc fdfd 	bl	8000158 <__aeabi_dsub>
 800355e:	4652      	mov	r2, sl
 8003560:	465b      	mov	r3, fp
 8003562:	f7fc ffb1 	bl	80004c8 <__aeabi_dmul>
 8003566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800356a:	4680      	mov	r8, r0
 800356c:	4689      	mov	r9, r1
 800356e:	4620      	mov	r0, r4
 8003570:	4629      	mov	r1, r5
 8003572:	f7fc ffa9 	bl	80004c8 <__aeabi_dmul>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4640      	mov	r0, r8
 800357c:	4649      	mov	r1, r9
 800357e:	f7fc fded 	bl	800015c <__adddf3>
 8003582:	4632      	mov	r2, r6
 8003584:	463b      	mov	r3, r7
 8003586:	4680      	mov	r8, r0
 8003588:	4689      	mov	r9, r1
 800358a:	4650      	mov	r0, sl
 800358c:	4659      	mov	r1, fp
 800358e:	f7fc ff9b 	bl	80004c8 <__aeabi_dmul>
 8003592:	4604      	mov	r4, r0
 8003594:	460d      	mov	r5, r1
 8003596:	460b      	mov	r3, r1
 8003598:	4602      	mov	r2, r0
 800359a:	4649      	mov	r1, r9
 800359c:	4640      	mov	r0, r8
 800359e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80035a2:	f7fc fddb 	bl	800015c <__adddf3>
 80035a6:	4b18      	ldr	r3, [pc, #96]	; (8003608 <__ieee754_pow+0x3e0>)
 80035a8:	4682      	mov	sl, r0
 80035aa:	4299      	cmp	r1, r3
 80035ac:	460f      	mov	r7, r1
 80035ae:	460e      	mov	r6, r1
 80035b0:	f340 82e5 	ble.w	8003b7e <__ieee754_pow+0x956>
 80035b4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80035b8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80035bc:	4303      	orrs	r3, r0
 80035be:	f000 81df 	beq.w	8003980 <__ieee754_pow+0x758>
 80035c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2300      	movs	r3, #0
 80035ca:	f7fd f9ef 	bl	80009ac <__aeabi_dcmplt>
 80035ce:	3800      	subs	r0, #0
 80035d0:	bf18      	it	ne
 80035d2:	2001      	movne	r0, #1
 80035d4:	e72e      	b.n	8003434 <__ieee754_pow+0x20c>
 80035d6:	bf00      	nop
 80035d8:	60000000 	.word	0x60000000
 80035dc:	3ff71547 	.word	0x3ff71547
 80035e0:	f85ddf44 	.word	0xf85ddf44
 80035e4:	3e54ae0b 	.word	0x3e54ae0b
 80035e8:	55555555 	.word	0x55555555
 80035ec:	3fd55555 	.word	0x3fd55555
 80035f0:	652b82fe 	.word	0x652b82fe
 80035f4:	3ff71547 	.word	0x3ff71547
 80035f8:	3ff00000 	.word	0x3ff00000
 80035fc:	3fd00000 	.word	0x3fd00000
 8003600:	3fe00000 	.word	0x3fe00000
 8003604:	bff00000 	.word	0xbff00000
 8003608:	408fffff 	.word	0x408fffff
 800360c:	4bd2      	ldr	r3, [pc, #840]	; (8003958 <__ieee754_pow+0x730>)
 800360e:	2200      	movs	r2, #0
 8003610:	402b      	ands	r3, r5
 8003612:	b943      	cbnz	r3, 8003626 <__ieee754_pow+0x3fe>
 8003614:	4658      	mov	r0, fp
 8003616:	4661      	mov	r1, ip
 8003618:	4bd0      	ldr	r3, [pc, #832]	; (800395c <__ieee754_pow+0x734>)
 800361a:	f7fc ff55 	bl	80004c8 <__aeabi_dmul>
 800361e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003622:	4683      	mov	fp, r0
 8003624:	460c      	mov	r4, r1
 8003626:	1523      	asrs	r3, r4, #20
 8003628:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800362c:	4413      	add	r3, r2
 800362e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003630:	4bcb      	ldr	r3, [pc, #812]	; (8003960 <__ieee754_pow+0x738>)
 8003632:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003636:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800363a:	429c      	cmp	r4, r3
 800363c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003640:	dd08      	ble.n	8003654 <__ieee754_pow+0x42c>
 8003642:	4bc8      	ldr	r3, [pc, #800]	; (8003964 <__ieee754_pow+0x73c>)
 8003644:	429c      	cmp	r4, r3
 8003646:	f340 8199 	ble.w	800397c <__ieee754_pow+0x754>
 800364a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800364c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003650:	3301      	adds	r3, #1
 8003652:	930b      	str	r3, [sp, #44]	; 0x2c
 8003654:	2600      	movs	r6, #0
 8003656:	00f3      	lsls	r3, r6, #3
 8003658:	930d      	str	r3, [sp, #52]	; 0x34
 800365a:	4bc3      	ldr	r3, [pc, #780]	; (8003968 <__ieee754_pow+0x740>)
 800365c:	4658      	mov	r0, fp
 800365e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003662:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003666:	4629      	mov	r1, r5
 8003668:	461a      	mov	r2, r3
 800366a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800366e:	4623      	mov	r3, r4
 8003670:	f7fc fd72 	bl	8000158 <__aeabi_dsub>
 8003674:	46da      	mov	sl, fp
 8003676:	462b      	mov	r3, r5
 8003678:	4652      	mov	r2, sl
 800367a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800367e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003682:	f7fc fd6b 	bl	800015c <__adddf3>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	2000      	movs	r0, #0
 800368c:	49b7      	ldr	r1, [pc, #732]	; (800396c <__ieee754_pow+0x744>)
 800368e:	f7fd f845 	bl	800071c <__aeabi_ddiv>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800369a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800369e:	f7fc ff13 	bl	80004c8 <__aeabi_dmul>
 80036a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80036a6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80036aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80036ae:	2300      	movs	r3, #0
 80036b0:	2200      	movs	r2, #0
 80036b2:	46ab      	mov	fp, r5
 80036b4:	106d      	asrs	r5, r5, #1
 80036b6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80036c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80036c4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80036c8:	4640      	mov	r0, r8
 80036ca:	4649      	mov	r1, r9
 80036cc:	4614      	mov	r4, r2
 80036ce:	461d      	mov	r5, r3
 80036d0:	f7fc fefa 	bl	80004c8 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80036dc:	f7fc fd3c 	bl	8000158 <__aeabi_dsub>
 80036e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036e4:	4606      	mov	r6, r0
 80036e6:	460f      	mov	r7, r1
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	f7fc fd34 	bl	8000158 <__aeabi_dsub>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4650      	mov	r0, sl
 80036f6:	4659      	mov	r1, fp
 80036f8:	f7fc fd2e 	bl	8000158 <__aeabi_dsub>
 80036fc:	4642      	mov	r2, r8
 80036fe:	464b      	mov	r3, r9
 8003700:	f7fc fee2 	bl	80004c8 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4630      	mov	r0, r6
 800370a:	4639      	mov	r1, r7
 800370c:	f7fc fd24 	bl	8000158 <__aeabi_dsub>
 8003710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003714:	f7fc fed8 	bl	80004c8 <__aeabi_dmul>
 8003718:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800371c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	f7fc fed0 	bl	80004c8 <__aeabi_dmul>
 8003728:	a379      	add	r3, pc, #484	; (adr r3, 8003910 <__ieee754_pow+0x6e8>)
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	4604      	mov	r4, r0
 8003730:	460d      	mov	r5, r1
 8003732:	f7fc fec9 	bl	80004c8 <__aeabi_dmul>
 8003736:	a378      	add	r3, pc, #480	; (adr r3, 8003918 <__ieee754_pow+0x6f0>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f7fc fd0e 	bl	800015c <__adddf3>
 8003740:	4622      	mov	r2, r4
 8003742:	462b      	mov	r3, r5
 8003744:	f7fc fec0 	bl	80004c8 <__aeabi_dmul>
 8003748:	a375      	add	r3, pc, #468	; (adr r3, 8003920 <__ieee754_pow+0x6f8>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fc fd05 	bl	800015c <__adddf3>
 8003752:	4622      	mov	r2, r4
 8003754:	462b      	mov	r3, r5
 8003756:	f7fc feb7 	bl	80004c8 <__aeabi_dmul>
 800375a:	a373      	add	r3, pc, #460	; (adr r3, 8003928 <__ieee754_pow+0x700>)
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f7fc fcfc 	bl	800015c <__adddf3>
 8003764:	4622      	mov	r2, r4
 8003766:	462b      	mov	r3, r5
 8003768:	f7fc feae 	bl	80004c8 <__aeabi_dmul>
 800376c:	a370      	add	r3, pc, #448	; (adr r3, 8003930 <__ieee754_pow+0x708>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc fcf3 	bl	800015c <__adddf3>
 8003776:	4622      	mov	r2, r4
 8003778:	462b      	mov	r3, r5
 800377a:	f7fc fea5 	bl	80004c8 <__aeabi_dmul>
 800377e:	a36e      	add	r3, pc, #440	; (adr r3, 8003938 <__ieee754_pow+0x710>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f7fc fcea 	bl	800015c <__adddf3>
 8003788:	4622      	mov	r2, r4
 800378a:	4606      	mov	r6, r0
 800378c:	460f      	mov	r7, r1
 800378e:	462b      	mov	r3, r5
 8003790:	4620      	mov	r0, r4
 8003792:	4629      	mov	r1, r5
 8003794:	f7fc fe98 	bl	80004c8 <__aeabi_dmul>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4630      	mov	r0, r6
 800379e:	4639      	mov	r1, r7
 80037a0:	f7fc fe92 	bl	80004c8 <__aeabi_dmul>
 80037a4:	4604      	mov	r4, r0
 80037a6:	460d      	mov	r5, r1
 80037a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037ac:	4642      	mov	r2, r8
 80037ae:	464b      	mov	r3, r9
 80037b0:	f7fc fcd4 	bl	800015c <__adddf3>
 80037b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037b8:	f7fc fe86 	bl	80004c8 <__aeabi_dmul>
 80037bc:	4622      	mov	r2, r4
 80037be:	462b      	mov	r3, r5
 80037c0:	f7fc fccc 	bl	800015c <__adddf3>
 80037c4:	4642      	mov	r2, r8
 80037c6:	4606      	mov	r6, r0
 80037c8:	460f      	mov	r7, r1
 80037ca:	464b      	mov	r3, r9
 80037cc:	4640      	mov	r0, r8
 80037ce:	4649      	mov	r1, r9
 80037d0:	f7fc fe7a 	bl	80004c8 <__aeabi_dmul>
 80037d4:	2200      	movs	r2, #0
 80037d6:	4b66      	ldr	r3, [pc, #408]	; (8003970 <__ieee754_pow+0x748>)
 80037d8:	4682      	mov	sl, r0
 80037da:	468b      	mov	fp, r1
 80037dc:	f7fc fcbe 	bl	800015c <__adddf3>
 80037e0:	4632      	mov	r2, r6
 80037e2:	463b      	mov	r3, r7
 80037e4:	f7fc fcba 	bl	800015c <__adddf3>
 80037e8:	2400      	movs	r4, #0
 80037ea:	460d      	mov	r5, r1
 80037ec:	4622      	mov	r2, r4
 80037ee:	460b      	mov	r3, r1
 80037f0:	4640      	mov	r0, r8
 80037f2:	4649      	mov	r1, r9
 80037f4:	f7fc fe68 	bl	80004c8 <__aeabi_dmul>
 80037f8:	2200      	movs	r2, #0
 80037fa:	4680      	mov	r8, r0
 80037fc:	4689      	mov	r9, r1
 80037fe:	4620      	mov	r0, r4
 8003800:	4629      	mov	r1, r5
 8003802:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <__ieee754_pow+0x748>)
 8003804:	f7fc fca8 	bl	8000158 <__aeabi_dsub>
 8003808:	4652      	mov	r2, sl
 800380a:	465b      	mov	r3, fp
 800380c:	f7fc fca4 	bl	8000158 <__aeabi_dsub>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4630      	mov	r0, r6
 8003816:	4639      	mov	r1, r7
 8003818:	f7fc fc9e 	bl	8000158 <__aeabi_dsub>
 800381c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003820:	f7fc fe52 	bl	80004c8 <__aeabi_dmul>
 8003824:	4622      	mov	r2, r4
 8003826:	4606      	mov	r6, r0
 8003828:	460f      	mov	r7, r1
 800382a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800382e:	462b      	mov	r3, r5
 8003830:	f7fc fe4a 	bl	80004c8 <__aeabi_dmul>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4630      	mov	r0, r6
 800383a:	4639      	mov	r1, r7
 800383c:	f7fc fc8e 	bl	800015c <__adddf3>
 8003840:	2400      	movs	r4, #0
 8003842:	4606      	mov	r6, r0
 8003844:	460f      	mov	r7, r1
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4640      	mov	r0, r8
 800384c:	4649      	mov	r1, r9
 800384e:	f7fc fc85 	bl	800015c <__adddf3>
 8003852:	a33b      	add	r3, pc, #236	; (adr r3, 8003940 <__ieee754_pow+0x718>)
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	4620      	mov	r0, r4
 800385a:	460d      	mov	r5, r1
 800385c:	f7fc fe34 	bl	80004c8 <__aeabi_dmul>
 8003860:	4642      	mov	r2, r8
 8003862:	464b      	mov	r3, r9
 8003864:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003868:	4620      	mov	r0, r4
 800386a:	4629      	mov	r1, r5
 800386c:	f7fc fc74 	bl	8000158 <__aeabi_dsub>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4630      	mov	r0, r6
 8003876:	4639      	mov	r1, r7
 8003878:	f7fc fc6e 	bl	8000158 <__aeabi_dsub>
 800387c:	a332      	add	r3, pc, #200	; (adr r3, 8003948 <__ieee754_pow+0x720>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f7fc fe21 	bl	80004c8 <__aeabi_dmul>
 8003886:	a332      	add	r3, pc, #200	; (adr r3, 8003950 <__ieee754_pow+0x728>)
 8003888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388c:	4606      	mov	r6, r0
 800388e:	460f      	mov	r7, r1
 8003890:	4620      	mov	r0, r4
 8003892:	4629      	mov	r1, r5
 8003894:	f7fc fe18 	bl	80004c8 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4630      	mov	r0, r6
 800389e:	4639      	mov	r1, r7
 80038a0:	f7fc fc5c 	bl	800015c <__adddf3>
 80038a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80038a6:	4b33      	ldr	r3, [pc, #204]	; (8003974 <__ieee754_pow+0x74c>)
 80038a8:	f04f 0a00 	mov.w	sl, #0
 80038ac:	4413      	add	r3, r2
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f7fc fc53 	bl	800015c <__adddf3>
 80038b6:	4680      	mov	r8, r0
 80038b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80038ba:	4689      	mov	r9, r1
 80038bc:	f7fc fd9a 	bl	80003f4 <__aeabi_i2d>
 80038c0:	4604      	mov	r4, r0
 80038c2:	460d      	mov	r5, r1
 80038c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80038c6:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <__ieee754_pow+0x750>)
 80038c8:	4413      	add	r3, r2
 80038ca:	e9d3 6700 	ldrd	r6, r7, [r3]
 80038ce:	4642      	mov	r2, r8
 80038d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038d4:	464b      	mov	r3, r9
 80038d6:	f7fc fc41 	bl	800015c <__adddf3>
 80038da:	4632      	mov	r2, r6
 80038dc:	463b      	mov	r3, r7
 80038de:	f7fc fc3d 	bl	800015c <__adddf3>
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	f7fc fc39 	bl	800015c <__adddf3>
 80038ea:	4622      	mov	r2, r4
 80038ec:	462b      	mov	r3, r5
 80038ee:	4650      	mov	r0, sl
 80038f0:	468b      	mov	fp, r1
 80038f2:	f7fc fc31 	bl	8000158 <__aeabi_dsub>
 80038f6:	4632      	mov	r2, r6
 80038f8:	463b      	mov	r3, r7
 80038fa:	f7fc fc2d 	bl	8000158 <__aeabi_dsub>
 80038fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003902:	f7fc fc29 	bl	8000158 <__aeabi_dsub>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4640      	mov	r0, r8
 800390c:	4649      	mov	r1, r9
 800390e:	e60d      	b.n	800352c <__ieee754_pow+0x304>
 8003910:	4a454eef 	.word	0x4a454eef
 8003914:	3fca7e28 	.word	0x3fca7e28
 8003918:	93c9db65 	.word	0x93c9db65
 800391c:	3fcd864a 	.word	0x3fcd864a
 8003920:	a91d4101 	.word	0xa91d4101
 8003924:	3fd17460 	.word	0x3fd17460
 8003928:	518f264d 	.word	0x518f264d
 800392c:	3fd55555 	.word	0x3fd55555
 8003930:	db6fabff 	.word	0xdb6fabff
 8003934:	3fdb6db6 	.word	0x3fdb6db6
 8003938:	33333303 	.word	0x33333303
 800393c:	3fe33333 	.word	0x3fe33333
 8003940:	e0000000 	.word	0xe0000000
 8003944:	3feec709 	.word	0x3feec709
 8003948:	dc3a03fd 	.word	0xdc3a03fd
 800394c:	3feec709 	.word	0x3feec709
 8003950:	145b01f5 	.word	0x145b01f5
 8003954:	be3e2fe0 	.word	0xbe3e2fe0
 8003958:	7ff00000 	.word	0x7ff00000
 800395c:	43400000 	.word	0x43400000
 8003960:	0003988e 	.word	0x0003988e
 8003964:	000bb679 	.word	0x000bb679
 8003968:	08003f60 	.word	0x08003f60
 800396c:	3ff00000 	.word	0x3ff00000
 8003970:	40080000 	.word	0x40080000
 8003974:	08003f80 	.word	0x08003f80
 8003978:	08003f70 	.word	0x08003f70
 800397c:	2601      	movs	r6, #1
 800397e:	e66a      	b.n	8003656 <__ieee754_pow+0x42e>
 8003980:	a39d      	add	r3, pc, #628	; (adr r3, 8003bf8 <__ieee754_pow+0x9d0>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	4640      	mov	r0, r8
 8003988:	4649      	mov	r1, r9
 800398a:	f7fc fbe7 	bl	800015c <__adddf3>
 800398e:	4622      	mov	r2, r4
 8003990:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003994:	462b      	mov	r3, r5
 8003996:	4650      	mov	r0, sl
 8003998:	4639      	mov	r1, r7
 800399a:	f7fc fbdd 	bl	8000158 <__aeabi_dsub>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039a6:	f7fd f81f 	bl	80009e8 <__aeabi_dcmpgt>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	f47f ae09 	bne.w	80035c2 <__ieee754_pow+0x39a>
 80039b0:	4aa3      	ldr	r2, [pc, #652]	; (8003c40 <__ieee754_pow+0xa18>)
 80039b2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80039b6:	4293      	cmp	r3, r2
 80039b8:	f340 8101 	ble.w	8003bbe <__ieee754_pow+0x996>
 80039bc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80039c0:	2000      	movs	r0, #0
 80039c2:	151b      	asrs	r3, r3, #20
 80039c4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80039c8:	fa4a f303 	asr.w	r3, sl, r3
 80039cc:	4433      	add	r3, r6
 80039ce:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80039d2:	4f9c      	ldr	r7, [pc, #624]	; (8003c44 <__ieee754_pow+0xa1c>)
 80039d4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80039d8:	4117      	asrs	r7, r2
 80039da:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80039de:	ea23 0107 	bic.w	r1, r3, r7
 80039e2:	f1c2 0214 	rsb	r2, r2, #20
 80039e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80039ea:	460b      	mov	r3, r1
 80039ec:	fa4a fa02 	asr.w	sl, sl, r2
 80039f0:	2e00      	cmp	r6, #0
 80039f2:	4602      	mov	r2, r0
 80039f4:	4629      	mov	r1, r5
 80039f6:	4620      	mov	r0, r4
 80039f8:	bfb8      	it	lt
 80039fa:	f1ca 0a00 	rsblt	sl, sl, #0
 80039fe:	f7fc fbab 	bl	8000158 <__aeabi_dsub>
 8003a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a0a:	2400      	movs	r4, #0
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	f7fc fba4 	bl	800015c <__adddf3>
 8003a14:	a37a      	add	r3, pc, #488	; (adr r3, 8003c00 <__ieee754_pow+0x9d8>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	460d      	mov	r5, r1
 8003a1e:	f7fc fd53 	bl	80004c8 <__aeabi_dmul>
 8003a22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a26:	4606      	mov	r6, r0
 8003a28:	460f      	mov	r7, r1
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	f7fc fb93 	bl	8000158 <__aeabi_dsub>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4640      	mov	r0, r8
 8003a38:	4649      	mov	r1, r9
 8003a3a:	f7fc fb8d 	bl	8000158 <__aeabi_dsub>
 8003a3e:	a372      	add	r3, pc, #456	; (adr r3, 8003c08 <__ieee754_pow+0x9e0>)
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f7fc fd40 	bl	80004c8 <__aeabi_dmul>
 8003a48:	a371      	add	r3, pc, #452	; (adr r3, 8003c10 <__ieee754_pow+0x9e8>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	4680      	mov	r8, r0
 8003a50:	4689      	mov	r9, r1
 8003a52:	4620      	mov	r0, r4
 8003a54:	4629      	mov	r1, r5
 8003a56:	f7fc fd37 	bl	80004c8 <__aeabi_dmul>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4640      	mov	r0, r8
 8003a60:	4649      	mov	r1, r9
 8003a62:	f7fc fb7b 	bl	800015c <__adddf3>
 8003a66:	4604      	mov	r4, r0
 8003a68:	460d      	mov	r5, r1
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4630      	mov	r0, r6
 8003a70:	4639      	mov	r1, r7
 8003a72:	f7fc fb73 	bl	800015c <__adddf3>
 8003a76:	4632      	mov	r2, r6
 8003a78:	463b      	mov	r3, r7
 8003a7a:	4680      	mov	r8, r0
 8003a7c:	4689      	mov	r9, r1
 8003a7e:	f7fc fb6b 	bl	8000158 <__aeabi_dsub>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4620      	mov	r0, r4
 8003a88:	4629      	mov	r1, r5
 8003a8a:	f7fc fb65 	bl	8000158 <__aeabi_dsub>
 8003a8e:	4642      	mov	r2, r8
 8003a90:	4606      	mov	r6, r0
 8003a92:	460f      	mov	r7, r1
 8003a94:	464b      	mov	r3, r9
 8003a96:	4640      	mov	r0, r8
 8003a98:	4649      	mov	r1, r9
 8003a9a:	f7fc fd15 	bl	80004c8 <__aeabi_dmul>
 8003a9e:	a35e      	add	r3, pc, #376	; (adr r3, 8003c18 <__ieee754_pow+0x9f0>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	460d      	mov	r5, r1
 8003aa8:	f7fc fd0e 	bl	80004c8 <__aeabi_dmul>
 8003aac:	a35c      	add	r3, pc, #368	; (adr r3, 8003c20 <__ieee754_pow+0x9f8>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f7fc fb51 	bl	8000158 <__aeabi_dsub>
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	f7fc fd05 	bl	80004c8 <__aeabi_dmul>
 8003abe:	a35a      	add	r3, pc, #360	; (adr r3, 8003c28 <__ieee754_pow+0xa00>)
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f7fc fb4a 	bl	800015c <__adddf3>
 8003ac8:	4622      	mov	r2, r4
 8003aca:	462b      	mov	r3, r5
 8003acc:	f7fc fcfc 	bl	80004c8 <__aeabi_dmul>
 8003ad0:	a357      	add	r3, pc, #348	; (adr r3, 8003c30 <__ieee754_pow+0xa08>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc fb3f 	bl	8000158 <__aeabi_dsub>
 8003ada:	4622      	mov	r2, r4
 8003adc:	462b      	mov	r3, r5
 8003ade:	f7fc fcf3 	bl	80004c8 <__aeabi_dmul>
 8003ae2:	a355      	add	r3, pc, #340	; (adr r3, 8003c38 <__ieee754_pow+0xa10>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f7fc fb38 	bl	800015c <__adddf3>
 8003aec:	4622      	mov	r2, r4
 8003aee:	462b      	mov	r3, r5
 8003af0:	f7fc fcea 	bl	80004c8 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4640      	mov	r0, r8
 8003afa:	4649      	mov	r1, r9
 8003afc:	f7fc fb2c 	bl	8000158 <__aeabi_dsub>
 8003b00:	4604      	mov	r4, r0
 8003b02:	460d      	mov	r5, r1
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4640      	mov	r0, r8
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	f7fc fcdc 	bl	80004c8 <__aeabi_dmul>
 8003b10:	2200      	movs	r2, #0
 8003b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	f7fc fb1b 	bl	8000158 <__aeabi_dsub>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b2a:	f7fc fdf7 	bl	800071c <__aeabi_ddiv>
 8003b2e:	4632      	mov	r2, r6
 8003b30:	4604      	mov	r4, r0
 8003b32:	460d      	mov	r5, r1
 8003b34:	463b      	mov	r3, r7
 8003b36:	4640      	mov	r0, r8
 8003b38:	4649      	mov	r1, r9
 8003b3a:	f7fc fcc5 	bl	80004c8 <__aeabi_dmul>
 8003b3e:	4632      	mov	r2, r6
 8003b40:	463b      	mov	r3, r7
 8003b42:	f7fc fb0b 	bl	800015c <__adddf3>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f7fc fb03 	bl	8000158 <__aeabi_dsub>
 8003b52:	4642      	mov	r2, r8
 8003b54:	464b      	mov	r3, r9
 8003b56:	f7fc faff 	bl	8000158 <__aeabi_dsub>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	2000      	movs	r0, #0
 8003b60:	4939      	ldr	r1, [pc, #228]	; (8003c48 <__ieee754_pow+0xa20>)
 8003b62:	f7fc faf9 	bl	8000158 <__aeabi_dsub>
 8003b66:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003b6a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003b6e:	da29      	bge.n	8003bc4 <__ieee754_pow+0x99c>
 8003b70:	4652      	mov	r2, sl
 8003b72:	f000 f955 	bl	8003e20 <scalbn>
 8003b76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b7a:	f7ff bbfe 	b.w	800337a <__ieee754_pow+0x152>
 8003b7e:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <__ieee754_pow+0xa24>)
 8003b80:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003b84:	429f      	cmp	r7, r3
 8003b86:	f77f af13 	ble.w	80039b0 <__ieee754_pow+0x788>
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <__ieee754_pow+0xa28>)
 8003b8c:	440b      	add	r3, r1
 8003b8e:	4303      	orrs	r3, r0
 8003b90:	d009      	beq.n	8003ba6 <__ieee754_pow+0x97e>
 8003b92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b96:	2200      	movs	r2, #0
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f7fc ff07 	bl	80009ac <__aeabi_dcmplt>
 8003b9e:	3800      	subs	r0, #0
 8003ba0:	bf18      	it	ne
 8003ba2:	2001      	movne	r0, #1
 8003ba4:	e453      	b.n	800344e <__ieee754_pow+0x226>
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	f7fc fad5 	bl	8000158 <__aeabi_dsub>
 8003bae:	4642      	mov	r2, r8
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	f7fc ff0f 	bl	80009d4 <__aeabi_dcmpge>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	f43f aefa 	beq.w	80039b0 <__ieee754_pow+0x788>
 8003bbc:	e7e9      	b.n	8003b92 <__ieee754_pow+0x96a>
 8003bbe:	f04f 0a00 	mov.w	sl, #0
 8003bc2:	e720      	b.n	8003a06 <__ieee754_pow+0x7de>
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	e7d6      	b.n	8003b76 <__ieee754_pow+0x94e>
 8003bc8:	f04f 0b00 	mov.w	fp, #0
 8003bcc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003c48 <__ieee754_pow+0xa20>
 8003bd0:	f7ff bbba 	b.w	8003348 <__ieee754_pow+0x120>
 8003bd4:	f04f 0b00 	mov.w	fp, #0
 8003bd8:	f04f 0c00 	mov.w	ip, #0
 8003bdc:	f7ff bbb4 	b.w	8003348 <__ieee754_pow+0x120>
 8003be0:	4640      	mov	r0, r8
 8003be2:	4649      	mov	r1, r9
 8003be4:	f7ff bb3d 	b.w	8003262 <__ieee754_pow+0x3a>
 8003be8:	9200      	str	r2, [sp, #0]
 8003bea:	f7ff bb89 	b.w	8003300 <__ieee754_pow+0xd8>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f7ff bb73 	b.w	80032da <__ieee754_pow+0xb2>
 8003bf4:	f3af 8000 	nop.w
 8003bf8:	652b82fe 	.word	0x652b82fe
 8003bfc:	3c971547 	.word	0x3c971547
 8003c00:	00000000 	.word	0x00000000
 8003c04:	3fe62e43 	.word	0x3fe62e43
 8003c08:	fefa39ef 	.word	0xfefa39ef
 8003c0c:	3fe62e42 	.word	0x3fe62e42
 8003c10:	0ca86c39 	.word	0x0ca86c39
 8003c14:	be205c61 	.word	0xbe205c61
 8003c18:	72bea4d0 	.word	0x72bea4d0
 8003c1c:	3e663769 	.word	0x3e663769
 8003c20:	c5d26bf1 	.word	0xc5d26bf1
 8003c24:	3ebbbd41 	.word	0x3ebbbd41
 8003c28:	af25de2c 	.word	0xaf25de2c
 8003c2c:	3f11566a 	.word	0x3f11566a
 8003c30:	16bebd93 	.word	0x16bebd93
 8003c34:	3f66c16c 	.word	0x3f66c16c
 8003c38:	5555553e 	.word	0x5555553e
 8003c3c:	3fc55555 	.word	0x3fc55555
 8003c40:	3fe00000 	.word	0x3fe00000
 8003c44:	000fffff 	.word	0x000fffff
 8003c48:	3ff00000 	.word	0x3ff00000
 8003c4c:	4090cbff 	.word	0x4090cbff
 8003c50:	3f6f3400 	.word	0x3f6f3400

08003c54 <__ieee754_sqrt>:
 8003c54:	f8df c158 	ldr.w	ip, [pc, #344]	; 8003db0 <__ieee754_sqrt+0x15c>
 8003c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5c:	ea3c 0c01 	bics.w	ip, ip, r1
 8003c60:	4606      	mov	r6, r0
 8003c62:	460d      	mov	r5, r1
 8003c64:	460c      	mov	r4, r1
 8003c66:	460a      	mov	r2, r1
 8003c68:	4607      	mov	r7, r0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	d10f      	bne.n	8003c8e <__ieee754_sqrt+0x3a>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	f7fc fc29 	bl	80004c8 <__aeabi_dmul>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	f7fc fa6d 	bl	800015c <__adddf3>
 8003c82:	4606      	mov	r6, r0
 8003c84:	460d      	mov	r5, r1
 8003c86:	4630      	mov	r0, r6
 8003c88:	4629      	mov	r1, r5
 8003c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c8e:	2900      	cmp	r1, #0
 8003c90:	dc0e      	bgt.n	8003cb0 <__ieee754_sqrt+0x5c>
 8003c92:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003c96:	ea5c 0707 	orrs.w	r7, ip, r7
 8003c9a:	d0f4      	beq.n	8003c86 <__ieee754_sqrt+0x32>
 8003c9c:	b141      	cbz	r1, 8003cb0 <__ieee754_sqrt+0x5c>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	f7fc fa59 	bl	8000158 <__aeabi_dsub>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	f7fc fd37 	bl	800071c <__aeabi_ddiv>
 8003cae:	e7e8      	b.n	8003c82 <__ieee754_sqrt+0x2e>
 8003cb0:	1521      	asrs	r1, r4, #20
 8003cb2:	d075      	beq.n	8003da0 <__ieee754_sqrt+0x14c>
 8003cb4:	07cc      	lsls	r4, r1, #31
 8003cb6:	f04f 0400 	mov.w	r4, #0
 8003cba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003cbe:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8003cc2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003cc6:	bf5e      	ittt	pl
 8003cc8:	0fd9      	lsrpl	r1, r3, #31
 8003cca:	005b      	lslpl	r3, r3, #1
 8003ccc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8003cd0:	0fd9      	lsrs	r1, r3, #31
 8003cd2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003cd6:	2516      	movs	r5, #22
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cde:	107f      	asrs	r7, r7, #1
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	1846      	adds	r6, r0, r1
 8003ce4:	4296      	cmp	r6, r2
 8003ce6:	bfde      	ittt	le
 8003ce8:	1b92      	suble	r2, r2, r6
 8003cea:	1870      	addle	r0, r6, r1
 8003cec:	1864      	addle	r4, r4, r1
 8003cee:	0052      	lsls	r2, r2, #1
 8003cf0:	3d01      	subs	r5, #1
 8003cf2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003cf6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003cfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003cfe:	d1f0      	bne.n	8003ce2 <__ieee754_sqrt+0x8e>
 8003d00:	4629      	mov	r1, r5
 8003d02:	f04f 0e20 	mov.w	lr, #32
 8003d06:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003d0a:	4282      	cmp	r2, r0
 8003d0c:	eb06 0c05 	add.w	ip, r6, r5
 8003d10:	dc02      	bgt.n	8003d18 <__ieee754_sqrt+0xc4>
 8003d12:	d113      	bne.n	8003d3c <__ieee754_sqrt+0xe8>
 8003d14:	459c      	cmp	ip, r3
 8003d16:	d811      	bhi.n	8003d3c <__ieee754_sqrt+0xe8>
 8003d18:	f1bc 0f00 	cmp.w	ip, #0
 8003d1c:	eb0c 0506 	add.w	r5, ip, r6
 8003d20:	da43      	bge.n	8003daa <__ieee754_sqrt+0x156>
 8003d22:	2d00      	cmp	r5, #0
 8003d24:	db41      	blt.n	8003daa <__ieee754_sqrt+0x156>
 8003d26:	f100 0801 	add.w	r8, r0, #1
 8003d2a:	1a12      	subs	r2, r2, r0
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	459c      	cmp	ip, r3
 8003d30:	bf88      	it	hi
 8003d32:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003d36:	eba3 030c 	sub.w	r3, r3, ip
 8003d3a:	4431      	add	r1, r6
 8003d3c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8003d40:	f1be 0e01 	subs.w	lr, lr, #1
 8003d44:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8003d48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003d50:	d1db      	bne.n	8003d0a <__ieee754_sqrt+0xb6>
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d006      	beq.n	8003d64 <__ieee754_sqrt+0x110>
 8003d56:	1c48      	adds	r0, r1, #1
 8003d58:	bf0b      	itete	eq
 8003d5a:	4671      	moveq	r1, lr
 8003d5c:	3101      	addne	r1, #1
 8003d5e:	3401      	addeq	r4, #1
 8003d60:	f021 0101 	bicne.w	r1, r1, #1
 8003d64:	1063      	asrs	r3, r4, #1
 8003d66:	0849      	lsrs	r1, r1, #1
 8003d68:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003d6c:	07e2      	lsls	r2, r4, #31
 8003d6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003d72:	bf48      	it	mi
 8003d74:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8003d78:	460e      	mov	r6, r1
 8003d7a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003d7e:	e782      	b.n	8003c86 <__ieee754_sqrt+0x32>
 8003d80:	0ada      	lsrs	r2, r3, #11
 8003d82:	3815      	subs	r0, #21
 8003d84:	055b      	lsls	r3, r3, #21
 8003d86:	2a00      	cmp	r2, #0
 8003d88:	d0fa      	beq.n	8003d80 <__ieee754_sqrt+0x12c>
 8003d8a:	02d5      	lsls	r5, r2, #11
 8003d8c:	d50a      	bpl.n	8003da4 <__ieee754_sqrt+0x150>
 8003d8e:	f1c1 0420 	rsb	r4, r1, #32
 8003d92:	fa23 f404 	lsr.w	r4, r3, r4
 8003d96:	1e4d      	subs	r5, r1, #1
 8003d98:	408b      	lsls	r3, r1
 8003d9a:	4322      	orrs	r2, r4
 8003d9c:	1b41      	subs	r1, r0, r5
 8003d9e:	e789      	b.n	8003cb4 <__ieee754_sqrt+0x60>
 8003da0:	4608      	mov	r0, r1
 8003da2:	e7f0      	b.n	8003d86 <__ieee754_sqrt+0x132>
 8003da4:	0052      	lsls	r2, r2, #1
 8003da6:	3101      	adds	r1, #1
 8003da8:	e7ef      	b.n	8003d8a <__ieee754_sqrt+0x136>
 8003daa:	4680      	mov	r8, r0
 8003dac:	e7bd      	b.n	8003d2a <__ieee754_sqrt+0xd6>
 8003dae:	bf00      	nop
 8003db0:	7ff00000 	.word	0x7ff00000

08003db4 <with_errno>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4604      	mov	r4, r0
 8003db8:	460d      	mov	r5, r1
 8003dba:	4616      	mov	r6, r2
 8003dbc:	f7ff f99a 	bl	80030f4 <__errno>
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	6006      	str	r6, [r0, #0]
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}

08003dc8 <xflow>:
 8003dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003dca:	4615      	mov	r5, r2
 8003dcc:	461c      	mov	r4, r3
 8003dce:	b180      	cbz	r0, 8003df2 <xflow+0x2a>
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003dd6:	e9cd 0100 	strd	r0, r1, [sp]
 8003dda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dde:	4628      	mov	r0, r5
 8003de0:	4621      	mov	r1, r4
 8003de2:	f7fc fb71 	bl	80004c8 <__aeabi_dmul>
 8003de6:	2222      	movs	r2, #34	; 0x22
 8003de8:	b003      	add	sp, #12
 8003dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dee:	f7ff bfe1 	b.w	8003db4 <with_errno>
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	e7ee      	b.n	8003dd6 <xflow+0xe>

08003df8 <__math_uflow>:
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003dfe:	f7ff bfe3 	b.w	8003dc8 <xflow>

08003e02 <__math_oflow>:
 8003e02:	2200      	movs	r2, #0
 8003e04:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8003e08:	f7ff bfde 	b.w	8003dc8 <xflow>

08003e0c <fabs>:
 8003e0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003e10:	4770      	bx	lr

08003e12 <finite>:
 8003e12:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003e16:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003e1a:	0fc0      	lsrs	r0, r0, #31
 8003e1c:	4770      	bx	lr
	...

08003e20 <scalbn>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003e26:	4604      	mov	r4, r0
 8003e28:	460d      	mov	r5, r1
 8003e2a:	4617      	mov	r7, r2
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	b996      	cbnz	r6, 8003e56 <scalbn+0x36>
 8003e30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003e34:	4303      	orrs	r3, r0
 8003e36:	d039      	beq.n	8003eac <scalbn+0x8c>
 8003e38:	4b33      	ldr	r3, [pc, #204]	; (8003f08 <scalbn+0xe8>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f7fc fb44 	bl	80004c8 <__aeabi_dmul>
 8003e40:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <scalbn+0xec>)
 8003e42:	4604      	mov	r4, r0
 8003e44:	429f      	cmp	r7, r3
 8003e46:	460d      	mov	r5, r1
 8003e48:	da0f      	bge.n	8003e6a <scalbn+0x4a>
 8003e4a:	a32b      	add	r3, pc, #172	; (adr r3, 8003ef8 <scalbn+0xd8>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fb3a 	bl	80004c8 <__aeabi_dmul>
 8003e54:	e006      	b.n	8003e64 <scalbn+0x44>
 8003e56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003e5a:	4296      	cmp	r6, r2
 8003e5c:	d10a      	bne.n	8003e74 <scalbn+0x54>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	f7fc f97c 	bl	800015c <__adddf3>
 8003e64:	4604      	mov	r4, r0
 8003e66:	460d      	mov	r5, r1
 8003e68:	e020      	b.n	8003eac <scalbn+0x8c>
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003e70:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8003e74:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003e78:	19b9      	adds	r1, r7, r6
 8003e7a:	4291      	cmp	r1, r2
 8003e7c:	dd0e      	ble.n	8003e9c <scalbn+0x7c>
 8003e7e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003e82:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003e86:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003e8a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003e8e:	4820      	ldr	r0, [pc, #128]	; (8003f10 <scalbn+0xf0>)
 8003e90:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003e94:	a31a      	add	r3, pc, #104	; (adr r3, 8003f00 <scalbn+0xe0>)
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	e7d9      	b.n	8003e50 <scalbn+0x30>
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	dd08      	ble.n	8003eb2 <scalbn+0x92>
 8003ea0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003ea4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ea8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003eac:	4620      	mov	r0, r4
 8003eae:	4629      	mov	r1, r5
 8003eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eb2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8003eb6:	da12      	bge.n	8003ede <scalbn+0xbe>
 8003eb8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003ebc:	429f      	cmp	r7, r3
 8003ebe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8003ec2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8003ec6:	dcdc      	bgt.n	8003e82 <scalbn+0x62>
 8003ec8:	a30b      	add	r3, pc, #44	; (adr r3, 8003ef8 <scalbn+0xd8>)
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8003ed2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8003ed6:	480f      	ldr	r0, [pc, #60]	; (8003f14 <scalbn+0xf4>)
 8003ed8:	f041 011f 	orr.w	r1, r1, #31
 8003edc:	e7b8      	b.n	8003e50 <scalbn+0x30>
 8003ede:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003ee2:	3136      	adds	r1, #54	; 0x36
 8003ee4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ee8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003eec:	4620      	mov	r0, r4
 8003eee:	4629      	mov	r1, r5
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <scalbn+0xf8>)
 8003ef4:	e7ac      	b.n	8003e50 <scalbn+0x30>
 8003ef6:	bf00      	nop
 8003ef8:	c2f8f359 	.word	0xc2f8f359
 8003efc:	01a56e1f 	.word	0x01a56e1f
 8003f00:	8800759c 	.word	0x8800759c
 8003f04:	7e37e43c 	.word	0x7e37e43c
 8003f08:	43500000 	.word	0x43500000
 8003f0c:	ffff3cb0 	.word	0xffff3cb0
 8003f10:	8800759c 	.word	0x8800759c
 8003f14:	c2f8f359 	.word	0xc2f8f359
 8003f18:	3c900000 	.word	0x3c900000

08003f1c <_init>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	bf00      	nop
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr

08003f28 <_fini>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	bf00      	nop
 8003f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2e:	bc08      	pop	{r3}
 8003f30:	469e      	mov	lr, r3
 8003f32:	4770      	bx	lr
